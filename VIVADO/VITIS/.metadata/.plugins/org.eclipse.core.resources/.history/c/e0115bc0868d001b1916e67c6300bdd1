/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xparameters.h"
#include "AMNS_arith_ip.h"
#include "xtime_l.h"

void AMNS_mult(uint32_t* dest, uint32_t* src1, uint32_t* src2);
void display_coeff(uint32_t* src, uint32_t size);
uint32_t BigAdd(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t c, uint32_t size);
uint32_t BigSub(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t size);
void BigMul(uint32_t* dest, uint32_t* src1, uint32_t* src2);
void MgtMul(uint32_t* dest, uint32_t* src1, uint32_t* src2);

uint32_t V[8] = {0xC9BD1905, 0x15538399, 0x9C46C2C2, 0x95F2B761, 0xBCB223FE, 0xDC24A059, 0xD838091D, 0xD2253531};
uint32_t P[8] = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFC2F};

uint32_t A[6][8] = {{0x29bc6c2f, 0x26077d22, 0x1221759c, 0x677025fc, 0x0271225a, 0x1dfd60bd, 0x13cc078e, 0x0637004d};
{0x480f0dfa, 0x43fd4d1b, 0x78765938, 0x7eaf07c2, 0x5daf39b6, 0x7fb00b72, 0x16c836c7, 0x34c85b4f};
{0x57422283, 0x10d90af8, 0x225a7325, 0x17541cec, 0x2b8f2687, 0x604c5abf, 0x76cd515e, 0x741873e6};
{0x1a652101, 0x01956902, 0x673c00be, 0x18080b38, 0x0499149e, 0x20e60421, 0x52dc6004, 0x344817f2};
{0x11f93a83, 0x4146353f, 0x21663575, 0x11142b88, 0x3c610cd4, 0x4bf855e5, 0x19a67ce7, 0x0e1a685e};
{0x2bf64994, 0x221a3363, 0x53f049bb, 0x0aa02231, 0x39642927, 0x46ec559e, 0x06024f4b, 0x216a3aec};
{0x0be93e18, 0x0bd51e5f, 0x4e4e1f73, 0x46391d37, 0x20f1312a, 0x0f8b6699, 0x355f7f13, 0x5fc35b1e};
{0x7f0c20dc, 0x5e5521e5, 0x35da6e56, 0x143e3356, 0x08567278, 0x548c7790, 0x718160c4, 0x23f76ce6};
{0x6b1a5b28, 0x790e4cc0, 0x5c193806, 0x5c4a2160, 0x3946136f, 0x0d8d0542, 0x76fe70c9, 0x289e2d8c};
{0x29ed0401, 0x430b2e31, 0x18416cb8, 0x46ac294f, 0x11b92fba, 0x008c659f, 0x6aa33498, 0x37b65a87};
{0x4995639c, 0x45792aca, 0x71cf2a18, 0x2ccf4b6d, 0x5968578d, 0x5c840e47, 0x7f8d0ef1, 0x5c302511};
{0x56e2142a, 0x310755ef, 0x1a6f0709, 0x07b072c3, 0x09d36414, 0x55b51f74, 0x5aae2eef, 0x2c713478};
{0x35614d5d, 0x619f06e6, 0x2a794490, 0x455112c5, 0x4960456a, 0x46fa4212, 0x64133a72, 0x22036b16};
{0x4433367f, 0x5d101ac6, 0x6faa4370, 0x1113025b, 0x38ed56af, 0x32cf28b7, 0x3eeb77f0, 0x25ee2f60};
{0x30863252, 0x7207137a, 0x151e7a55, 0x675752d0, 0x453548f0, 0x4b76450a, 0x2d997836, 0x559e0d01};
{0x44281429, 0x4fed025e, 0x5f3b6c15, 0x709c4ebe, 0x7b4e12b3, 0x4aa20910, 0x28a27bc4, 0x1bf603e8};
{0x310d5062, 0x4f3966f0, 0x34c66251, 0x08694af6, 0x7cef7205, 0x1c811f97, 0x59267124, 0x06897c3b};
{0x3d091a50, 0x66671660, 0x446a0f21, 0x08155294, 0x41406747, 0x23f54c25, 0x3d1b6a92, 0x5a516eb8};
{0x20fd0977, 0x05be7bae, 0x0079376b, 0x520f1e9f, 0x14977493, 0x20a23e21, 0x57c27224, 0x784d0e2d};
{0x291d7a1b, 0x51466474, 0x0e7e7ebc, 0x0d440c87, 0x0f096793, 0x199201a1, 0x359d3883, 0x00c73077};
{0x5e5e6378, 0x561d301e, 0x6340588b, 0x21d25533, 0x24332881, 0x72617110, 0x0e756c1e, 0x22717c3e};
{0x16ad28b3, 0x15527e41, 0x40c1510d, 0x09f37f3d, 0x7cf26ac0, 0x5a3f3d2a, 0x5f711dbf, 0x03200dcd};
{0x3b38084c, 0x34de46a6, 0x3c224899, 0x09395a1a, 0x37ce09b7, 0x60466ccd, 0x564873fa, 0x307d63d5};
{0x28015f40, 0x0b527970, 0x7279603d, 0x5be8315e, 0x37430bf6, 0x68c51668, 0x1be0166d, 0x29234f64};
{0x7d9445dd, 0x4a8a65b0, 0x5e282e7e, 0x4dcd7cbc, 0x4f6d381d, 0x6cda49be, 0x7c4242a0, 0x01f9465c};
{0x13611ae9, 0x60106fa8, 0x4eef4a73, 0x34ec2d93, 0x7e442a5c, 0x1bec2905, 0x603062b6, 0x0e9a41e1};
{0x5f790e12, 0x73a817a3, 0x10595520, 0x69147082, 0x5f1a779b, 0x4ea4044c, 0x416c34f9, 0x2a6e093a};
{0x23151cd6, 0x14527e92, 0x156b71d8, 0x1ac60284, 0x263d691b, 0x1e7b14a6, 0x35a906c1, 0x234b35ef};
{0x0ef076d3, 0x40c04ae7, 0x0dbd2b68, 0x08984cd2, 0x4edc3019, 0x702c7cdf, 0x5acc4beb, 0x716475d7};
{0x35646a30, 0x7ce147d6, 0x19347c94, 0x674042d8, 0x17752f5a, 0x6f3c7cf5, 0x39954ab7, 0x2afe0034};
{0x2e003a08, 0x765a51e4, 0x055c443e, 0x0de10d15, 0x7abc6d7f, 0x6ffb77e0, 0x716d2c5f, 0x5261399b};
{0x3c984c1f, 0x4285711b, 0x419454ce, 0x48200537, 0x4e352842, 0x60f5099a, 0x1d3a3abf, 0x3d7d7958};
{0x52b13599, 0x0cff6302, 0x1a3f568b, 0x0e7510b4, 0x32c05fb5, 0x20981db5, 0x22541f3e, 0x7cef65ee};
{0x3ef74fca, 0x62052409, 0x09d128af, 0x3f2f644b, 0x5ac542fb, 0x1a6f663d, 0x25e22702, 0x468f7e04};
{0x070b6b6f, 0x313618a9, 0x636d3d35, 0x53de1b15, 0x3af25aa3, 0x088b7ac8, 0x7e8b116e, 0x54957038};
{0x56ca465a, 0x2c2b0e49, 0x01346a5e, 0x22357eb9, 0x616d32ac, 0x16724285, 0x2cd323a7, 0x05fb6ee0};
{0x49170170, 0x43887141, 0x6bee7726, 0x5ba453a2, 0x4b5a5632, 0x625d7f80, 0x0b1913d9, 0x70dc31e1};
{0x325844f6, 0x45bd6183, 0x4b055003, 0x1afa772c, 0x1a756e7e, 0x23c6521a, 0x1f5508d7, 0x0f8a3093};
{0x0adc4185, 0x587c4f32, 0x32cb2744, 0x574d45c2, 0x0fff6e48, 0x1c950044, 0x41065b65, 0x1d4a6851};
{0x13eb24c7, 0x2784535e, 0x1e8c53c8, 0x2745744a, 0x52243198, 0x65324ca5, 0x7eb272ba, 0x4b042bc6};
{0x32621997, 0x389a78e4, 0x2b0b1479, 0x2c6360dc, 0x28e962ce, 0x59bb357e, 0x0d5a40fc, 0x596934f0};
{0x51c902f5, 0x1e481d83, 0x471133d3, 0x18df20bb, 0x68c37b22, 0x517f6dce, 0x60304177, 0x74314d20};
{0x19b21b8c, 0x606a18bf, 0x3bb629ac, 0x746e785a, 0x2a2017ad, 0x70583b95, 0x511e4185, 0x58c11d27};
{0x563b40a7, 0x4ad17d9a, 0x23db724c, 0x15912b28, 0x529a0e46, 0x3375753c, 0x6d191937, 0x1ad8054a};
{0x0ed37d4e, 0x00753d2c, 0x3fd575c5, 0x7cf443a3, 0x1bad14cb, 0x6af312f1, 0x615a7de8, 0x02d80a5c};
{0x1f890305, 0x21e6354a, 0x2833555c, 0x17214639, 0x17f1722a, 0x29dc2698, 0x62b36221, 0x22c348eb};
{0x53cd18c3, 0x7d425891, 0x066e2bab, 0x477f5e1f, 0x79970612, 0x08141ffa, 0x07143b0d, 0x733849f8};
{0x3ffb3338, 0x6c510a3b, 0x5b61672b, 0x6b572895, 0x551071f6, 0x277c4989, 0x1247485e, 0x43b810ac};
{0x1ea96bd5, 0x6f594157, 0x528c2248, 0x09964736, 0x33e63b69, 0x3a432b18, 0x7f5661dc, 0x79690d64};
{0x5dd97e68, 0x46d84616, 0x58ad75e0, 0x33fd0ce5, 0x3a3e1cd3, 0x731d29b8, 0x611c3c15, 0x09805935};
{0x196e186b, 0x234331e7, 0x5b345483, 0x2cc26250, 0x2ea228b7, 0x280960b3, 0x7b277f3d, 0x18f16a07};
{0x336a55bc, 0x22443683, 0x4f5e13a3, 0x66d931d0, 0x0bc545e9, 0x278616cc, 0x487c716f, 0x53e3232d};
{0x6224646c, 0x198748a7, 0x4b706144, 0x4e8976d5, 0x41d465e6, 0x2bed5133, 0x1f904418, 0x095a5948};
{0x0ef76e5d, 0x435c2d29, 0x02be169e, 0x4db559ff, 0x21eb045f, 0x3380646e, 0x55ad6094, 0x56a8733c};
{0x0ad439c2, 0x06ad0801, 0x42470b73, 0x4076302d, 0x39842edd, 0x54787100, 0x05970555, 0x362c3891};
{0x52c84173, 0x42ea7fb1, 0x4a1318f6, 0x06574c19, 0x68f9335d, 0x59d36a46, 0x29f845ab, 0x1999520b};
{0x19852654, 0x533e565c, 0x52c239f9, 0x080e1dc0, 0x55b86384, 0x64301882, 0x3a473bdc, 0x3eed4949};
{0x75250c25, 0x0db407c2, 0x10a678d6, 0x028752c7, 0x6136720d, 0x314703fb, 0x7aa520dc, 0x787c4c42};
{0x083f5c0a, 0x1bc17e20, 0x03e777bc, 0x5edb32f7, 0x4a7a07c3, 0x519f0421, 0x3ea50495, 0x772730d7};
{0x00564f9b, 0x64842305, 0x55bf5864, 0x080f3cb1, 0x1eec2395, 0x24a31136, 0x10fc3651, 0x231a7289};
{0x450a30cc, 0x30be2db4, 0x50c073a5, 0x32644738, 0x3fd14382, 0x474d5446, 0x07bb2068, 0x666178a5};
{0x12a250fe, 0x5c203322, 0x2ca61dc8, 0x30b65c7e, 0x4a616f1d, 0x72b1759e, 0x4a450e2f, 0x1d3b5986};
{0x31ef1e82, 0x16bd7782, 0x2855009c, 0x243115ec, 0x51c662a9, 0x23c10d57, 0x7e90743e, 0x48240e1a};
{0x5e531976, 0x5d501dc0, 0x3ca2732b, 0x6a4308d7, 0x1fdf3fce, 0x2e3718dc, 0x17c774a1, 0x3ea619e4};
{0x24f54314, 0x064751f1, 0x6dac158a, 0x09cb3e7c, 0x105f5520, 0x798317be, 0x002c08fd, 0x0bf7429e};
{0x29af762a, 0x24de4c87, 0x40fc46b5, 0x767f1c63, 0x6fac44cf, 0x3dfe6697, 0x7ecb79cd, 0x33255049};
{0x6825606a, 0x6be31769, 0x77cf4d55, 0x6cb9444e, 0x7fa62ecf, 0x0f1b3fe1, 0x5d980b8f, 0x55624b99};
{0x4eff7843, 0x43902d21, 0x08fd4a8d, 0x6b3275cb, 0x1e107149, 0x5cce4e78, 0x189971db, 0x7a7e1d5e};
{0x39855c6d, 0x681a0652, 0x11c666e7, 0x0a830ecc, 0x17a3279f, 0x5f12362a, 0x5bdb4cda, 0x7bed4273};
{0x3c8a74e8, 0x1e303133, 0x77ea74dc, 0x322377b6, 0x23557c64, 0x196f4427, 0x127974f4, 0x687a25ca};
{0x4b204103, 0x4f734115, 0x7a974526, 0x54b2695d, 0x445d1b76, 0x17ee0f00, 0x33fd41c8, 0x0b212495};
{0x749a0542, 0x6d844e68, 0x050e7fc9, 0x091c08cd, 0x0bc16147, 0x56a83f4b, 0x2db35f40, 0x24e11235};
{0x42fb3c15, 0x2a764e18, 0x654c6efc, 0x70cd0368, 0x65dc0a3e, 0x1c3a42ca, 0x13070340, 0x42855365};
{0x0d750679, 0x3e557e65, 0x3bb0697d, 0x01e313b8, 0x779e5f1b, 0x4b423b8c, 0x3f8e50e6, 0x2b7b0f49};
{0x3b201f8c, 0x35ab17c4, 0x78ed0f50, 0x385c7057, 0x502817dd, 0x027b2df2, 0x1a004e29, 0x15a2144c};
{0x316419b4, 0x716a3ed5, 0x3b17741f, 0x0242071e, 0x1b327907, 0x02063894, 0x31532e0e, 0x4c104dab};
{0x4196614e, 0x619b6c81, 0x50807509, 0x38e72791, 0x4b4a0c3d, 0x153b10df, 0x5df0036d, 0x2bfe10b3};
{0x1eaf241b, 0x3b8d115e, 0x368c25d8, 0x43fe55a7, 0x3ec67634, 0x59b93a08, 0x004b1ee2, 0x2a670206};
{0x58651b45, 0x52cd7eb8, 0x7b0f1311, 0x33f7047e, 0x13495344, 0x53010ff9, 0x67df27f3, 0x61235600};
{0x279e4ed7, 0x25847ba8, 0x755748d0, 0x54e275fc, 0x3ea161ca, 0x05264793, 0x3dbb0f87, 0x3e496500};
{0x75960b57, 0x61c964cf, 0x7ba1004f, 0x1f134686, 0x582d7cdc, 0x6e5633a8, 0x34d664a3, 0x4499559d};
{0x32790710, 0x0c18075c, 0x52c06b2e, 0x16b562c5, 0x0b0d0af0, 0x0b146cdb, 0x0eee3028, 0x537e3341};
{0x032f136e, 0x1b181930, 0x493f77ab, 0x23c41111, 0x3dfe3cec, 0x4dc16854, 0x35dc0665, 0x19e664f0};
{0x39877ded, 0x20114222, 0x3e0f5f1b, 0x3f3e1aa9, 0x285004ce, 0x464a3988, 0x2d2b74eb, 0x09ce2d72};
{0x5f3b3971, 0x3f417a41, 0x4ef0580d, 0x1f916b87, 0x5cc56b5b, 0x0bca7e65, 0x4ffa7e21, 0x58943d63};
{0x4b112897, 0x66373da1, 0x3a8b3abe, 0x58462051, 0x2eb3268d, 0x65914143, 0x65b915f8, 0x5501183b};
{0x5bbf2748, 0x42cc4a6c, 0x6bbc245d, 0x24024150, 0x408a0413, 0x76f92a43, 0x5c3760bf, 0x2c2b7c5c};
{0x095f4036, 0x37520f82, 0x5f7d5840, 0x3f957a65, 0x4a7e0b55, 0x6bb11bb4, 0x19e10f78, 0x7cde3c43};
{0x3ec52adb, 0x4e423018, 0x72ab0383, 0x769f61d4, 0x695326fb, 0x11d70456, 0x279b6727, 0x74312345};
{0x2ab941f1, 0x4029516c, 0x582d55c8, 0x26f3338c, 0x3bf9124d, 0x2f726482, 0x3eeb2193, 0x1d2e6633};
{0x42543612, 0x3e2a35ac, 0x2ac64068, 0x10f1007c, 0x4b2a17fb, 0x12eb0907, 0x732e6e42, 0x44301785};
{0x79676ef0, 0x01852108, 0x63e3157f, 0x14285a6e, 0x576c5e9e, 0x5b9c3b55, 0x5e1f5070, 0x25b966b2};
{0x14755ed5, 0x230c4992, 0x4f1449f2, 0x207f34ae, 0x4e163efb, 0x64bd18bc, 0x73f976f6, 0x63af2284};
{0x53b04c5c, 0x502e1ffe, 0x55e73d8c, 0x60fb01b4, 0x051e576f, 0x6ef643d7, 0x14c46438, 0x5a471269};
{0x572f5f0c, 0x41703e31, 0x0e9d330a, 0x06d179d3, 0x4e2027e3, 0x25d677de, 0x5303262c, 0x4e3771aa};
{0x2bde235d, 0x54ec73f5, 0x15803818, 0x3b364006, 0x415827e9, 0x3c4925ae, 0x14246912, 0x52a04200};
{0x208a149f, 0x11df49f1, 0x0c6a3299, 0x59702f54, 0x1b4e029b, 0x28bd4ed6, 0x2d5444cd, 0x334f165f};
{0x0837011a, 0x0c874696, 0x1df8334b, 0x249f300b, 0x1c623f34, 0x6a5d0c82, 0x21852f27, 0x7a8b521e};
{0x7a8e0176, 0x40e1073a, 0x5f822385, 0x61e31897, 0x79aa230c, 0x73fa2a0b, 0x13f53fbf, 0x767f060b};
{0x030436bc, 0x47c64588, 0x7e95214c, 0x72ff706c, 0x3a845077, 0x73fa27fc, 0x16304a9f, 0x11d2236b}};

uint32_t B[100][8] = {{0x63444b79, 0x2efc7474, 0x12ee04b8, 0x1db25d06, 0x213c011c, 0x421679e4, 0x0bed27ec, 0x2f4f1a16};
{0x4a8c596a, 0x2b722273, 0x5aa03844, 0x501d23d1, 0x540652db, 0x27e82bc3, 0x5f6d13a1, 0x2c3b1a91};
{0x4cb33c91, 0x70ba7407, 0x25b47918, 0x3e660808, 0x3e0b38b4, 0x019812cb, 0x0e44323a, 0x29480fe8};
{0x2119424d, 0x30531301, 0x6960725a, 0x39c370e0, 0x352f0187, 0x28ee4f80, 0x7e842655, 0x318f2035};
{0x1ce342a4, 0x4ea24c5c, 0x0ade478f, 0x29860904, 0x701f09bd, 0x55082d27, 0x08033793, 0x63f108e9};
{0x5cf10e8d, 0x233150d8, 0x761f0db7, 0x01b70244, 0x3e485ba3, 0x6dd64edb, 0x08bc62e4, 0x5d952102};
{0x2ddd6f9b, 0x453c27d9, 0x29735b04, 0x789a3364, 0x4b80581d, 0x12ef655f, 0x5a3134de, 0x12d20a82};
{0x685d1f51, 0x24d419a0, 0x60230c82, 0x4dc206a3, 0x63992459, 0x4166697b, 0x275e6d76, 0x40170d9d};
{0x4da8795f, 0x051114e7, 0x5c7c425e, 0x792b3e8f, 0x58372bbe, 0x45d43bdd, 0x59d64b03, 0x1d747e19};
{0x41a519c1, 0x2a042f02, 0x1ab634e4, 0x17ac30a6, 0x2d6a62cf, 0x42676309, 0x17b22e32, 0x3cdb5ab1};
{0x3e4c39d7, 0x72a805ef, 0x73003087, 0x2cc045ed, 0x124a3086, 0x2c3f1508, 0x4ffb3ee9, 0x1f5e3118};
{0x7b116706, 0x7b8856a5, 0x2d1e1105, 0x2d3d36f4, 0x3803622d, 0x63a0032c, 0x2b005141, 0x0bab00e4};
{0x35d22eea, 0x26895157, 0x30077c66, 0x48e148e6, 0x69c4365f, 0x38b83948, 0x79a6797a, 0x681854e5};
{0x3ae93448, 0x36295a33, 0x32a36f0c, 0x303d5436, 0x33ab319c, 0x6bdb158d, 0x469046cb, 0x384d7cde};
{0x5e417a82, 0x6d3d3188, 0x4a9a20e3, 0x37162ae2, 0x42aa3130, 0x11c85505, 0x07e2079d, 0x7b2b7eea};
{0x3b7472ae, 0x4aaf0751, 0x5a8f6122, 0x16734713, 0x64ac2444, 0x75de69d4, 0x63a942f7, 0x22894f48};
{0x55a16286, 0x474b44eb, 0x6dbf3ce6, 0x14e83349, 0x750638e1, 0x11f678a7, 0x1fb41a3a, 0x101e288d};
{0x4afb5761, 0x7de22fa9, 0x68283d6e, 0x29a85234, 0x234c514c, 0x707253a8, 0x0f953ded, 0x7e297cca};
{0x2dfb50dd, 0x693b0de7, 0x38801357, 0x33de0d83, 0x4cdf0959, 0x47cb1896, 0x5a26063a, 0x12792f38};
{0x4bc65b89, 0x688928e3, 0x32b81e19, 0x07a43c40, 0x5bd413dc, 0x1e5f2ab1, 0x6b9a73d6, 0x52f30e0b};
{0x6d565371, 0x3b9672e3, 0x3de50b1e, 0x198148f8, 0x0a3e0282, 0x75ce0d3b, 0x443f4483, 0x21c55452};
{0x341d3c4c, 0x776e4ca7, 0x2585614a, 0x222f4fe0, 0x0e8c0b1e, 0x166d4a98, 0x2d0164da, 0x7cb10fb4};
{0x0dba1c29, 0x5ae33e49, 0x04f52f24, 0x7f575911, 0x612a2843, 0x128712fc, 0x5f0771fe, 0x11893d43};
{0x0e487ad5, 0x6b57789b, 0x3fd8292a, 0x3f115bbc, 0x4fbb1a38, 0x43641305, 0x1d125520, 0x2b29126c};
{0x7d2f00ed, 0x17aa1e80, 0x08b82e4f, 0x52ea1534, 0x79ab2284, 0x487e4a42, 0x1f874f93, 0x694d7372};
{0x788e5c4a, 0x590d0e6a, 0x14f85be1, 0x7811327b, 0x47aa6852, 0x640b679f, 0x19144cd1, 0x62242adc};
{0x1dbe7ba5, 0x767425f0, 0x38365b88, 0x35c238ca, 0x6fc93d2d, 0x763c3776, 0x6ec6422b, 0x649a6449};
{0x253969d4, 0x295873ba, 0x4c2f2396, 0x3af92ac5, 0x32a26095, 0x0b2b300f, 0x12511814, 0x796971ac};
{0x456e2a39, 0x2fc74b01, 0x76782db8, 0x7d65633c, 0x538d6827, 0x2e4842fe, 0x29cc52ac, 0x72f6612f};
{0x5a8f709a, 0x18ff1234, 0x20c36e71, 0x498f1f44, 0x60e93228, 0x1f8c57fc, 0x0e0f4712, 0x1cc20383};
{0x3e484e92, 0x302e681b, 0x1a853fc5, 0x335d17f0, 0x28fe3758, 0x372a3944, 0x21a22e00, 0x37ec1f8c};
{0x72d901c5, 0x38cc577f, 0x61fd6e9b, 0x399c6e9d, 0x36c75034, 0x5bf64f0f, 0x25972df2, 0x4bf50109};
{0x46524e96, 0x182e3ba6, 0x6f655099, 0x15323e50, 0x682562a9, 0x0b6b4aae, 0x1b4f250d, 0x0b0138c9};
{0x5c5e727c, 0x6d853543, 0x73251a3c, 0x74e77b7b, 0x2c8671e1, 0x4f3108f0, 0x063164dd, 0x5acb0ee7};
{0x0f96342e, 0x3c51680a, 0x3421431a, 0x146a21c3, 0x7d084602, 0x59920ba6, 0x4fdb2cbd, 0x77bf2a4c};
{0x19685be8, 0x6ff3212a, 0x4b832b7b, 0x393a2c84, 0x4e6d1256, 0x5c047d46, 0x712447fb, 0x710c55c5};
{0x401c2d43, 0x251e73af, 0x1bc01e32, 0x568f71b0, 0x47b1614c, 0x04277493, 0x6c4f5df6, 0x3dad557e};
{0x403d1b30, 0x4cde14da, 0x765e2081, 0x185b6c60, 0x3cc370bc, 0x393927ba, 0x3bba7773, 0x0a80024a};
{0x71ea0bbb, 0x0f1d48fe, 0x4d4a0cc8, 0x35284181, 0x1c28586d, 0x21b261dd, 0x11b275a2, 0x50537fc7};
{0x7b26517e, 0x650e0dfb, 0x13003b76, 0x781329b8, 0x2bd1103a, 0x719607f3, 0x4f39576e, 0x76ee451f};
{0x330a4580, 0x6ad7365d, 0x63c85dc3, 0x3dbe089d, 0x4273734f, 0x7cbc13eb, 0x550c54a8, 0x573a5290};
{0x086b63f7, 0x6d4a0e36, 0x54af0281, 0x122a5734, 0x63df37f9, 0x63e4219a, 0x28ea1013, 0x5a2052ec};
{0x05847478, 0x5cd36e35, 0x6e41040d, 0x31d8226c, 0x769c1dd8, 0x13cc2f27, 0x3f667ff0, 0x2de95b3f};
{0x3a547bc5, 0x6e5b1b33, 0x02b43fca, 0x74686b7b, 0x41347321, 0x42ea7c56, 0x5a150d8b, 0x2bdc6458};
{0x5f5e568d, 0x3d9906ef, 0x6fbd168d, 0x06fe4e56, 0x68ab67f2, 0x196b3bf8, 0x4dc72062, 0x63e80b3e};
{0x77290610, 0x450a3e99, 0x7857017a, 0x00956136, 0x341a10d9, 0x157223d0, 0x08027ffd, 0x37eb360b};
{0x2aa24da6, 0x19b27af1, 0x5f44502b, 0x66b92fc3, 0x3ca60584, 0x742026c6, 0x713702e6, 0x3cc037f3};
{0x393133ff, 0x221d0610, 0x24df19b9, 0x6c78370c, 0x40d72449, 0x364227af, 0x6bf85b92, 0x1e1508ae};
{0x45585faa, 0x31a528a5, 0x27df0fcf, 0x2e8f4e1b, 0x0a974e76, 0x3e733ffa, 0x0ebe1864, 0x2ff81ac8};
{0x0eb57abb, 0x0a5c0342, 0x0b961eae, 0x41da6fa6, 0x7fb4049a, 0x54241b9c, 0x53415872, 0x522120e9};
{0x01863683, 0x79fa5272, 0x28955861, 0x700a14c6, 0x5e853eb0, 0x46ec3bfa, 0x7f6575c4, 0x69185123};
{0x19fd136c, 0x56914bd4, 0x43c26a82, 0x5e8311ab, 0x1cf94cf4, 0x71dd173f, 0x1f2372c4, 0x1bd94763};
{0x25362018, 0x1b3a1ebf, 0x346f50c9, 0x70b2532c, 0x38797619, 0x1014332f, 0x103353ee, 0x47a95c6e};
{0x11517b38, 0x33827971, 0x78ac1b5c, 0x743b27c4, 0x58ee5c7e, 0x6638363f, 0x44e76ab1, 0x170348c5};
{0x6a6f0e51, 0x71ec17f6, 0x127343ef, 0x2a0e3cb6, 0x0c7a389b, 0x50722201, 0x02310fca, 0x5f322210};
{0x3ef9734a, 0x21f829bf, 0x699c1365, 0x08ca4099, 0x07db5661, 0x5bfc1845, 0x4dd44460, 0x336875b6};
{0x7f3a1716, 0x0e982c7e, 0x7dab20bc, 0x49a668ca, 0x42906e1d, 0x728f68d9, 0x0a652a41, 0x773b6b71};
{0x013c00c8, 0x76bb7e66, 0x69d978c5, 0x75f76ed1, 0x120721c4, 0x51f060f8, 0x573447f9, 0x34d022df};
{0x059e744f, 0x35c72ebf, 0x251f7a16, 0x310252d2, 0x36c32288, 0x14f14c1d, 0x51d94839, 0x0b4c65f9};
{0x4a646cdb, 0x5a931d0f, 0x60ad35a3, 0x698b4915, 0x73bb69d0, 0x1ade3801, 0x124d01a6, 0x330328e7};
{0x13a303e4, 0x5fff5521, 0x2bd606e7, 0x75ab5a34, 0x391c05c2, 0x0a227437, 0x7595329b, 0x4aee2310};
{0x20b744aa, 0x4a482f62, 0x495e7827, 0x654f6a0c, 0x3d3f1dad, 0x5d8c4907, 0x4469418d, 0x19c86478};
{0x335147bd, 0x39cb3a0c, 0x28d82215, 0x6128425a, 0x0da26bb4, 0x58aa6d8d, 0x069f5650, 0x19a8181e};
{0x1e7e595e, 0x16a16306, 0x3335327b, 0x3f08705f, 0x12db7082, 0x14c243b3, 0x46ce1bd6, 0x28e83637};
{0x62b165c3, 0x23b05be8, 0x272d4a89, 0x710132aa, 0x6c5e4c46, 0x3b0f2889, 0x0a01443f, 0x0f031e8b};
{0x7200401e, 0x646869a4, 0x417a1ac4, 0x20817eb5, 0x2cd75977, 0x0f4a5bad, 0x06c468aa, 0x742c02ce};
{0x13ca27dc, 0x32381d1d, 0x25de232c, 0x56bf368e, 0x01564361, 0x1fdb7991, 0x78c3314f, 0x768673bf};
{0x5d875213, 0x2c6378e3, 0x2b752b2d, 0x07813bb7, 0x577a13b6, 0x6feb489c, 0x05954431, 0x635932e5};
{0x2ca47bf1, 0x2dea4413, 0x17f172e5, 0x77e93d6d, 0x6c9410eb, 0x2995190f, 0x3feb766a, 0x4fb93923};
{0x37592c64, 0x3b5b4a6c, 0x3c6e21db, 0x45cf520d, 0x730d1e64, 0x2d6c4628, 0x58870e92, 0x323a3323};
{0x074873eb, 0x134e7b32, 0x6471249b, 0x6e071aae, 0x422018ce, 0x2ec6236a, 0x40831077, 0x4e24741d};
{0x69bf303a, 0x32171be6, 0x53ac00f9, 0x0134705e, 0x73d83cac, 0x129613fa, 0x28e46bf6, 0x70967431};
{0x71bd45b0, 0x12ed50e3, 0x66634738, 0x06a105bb, 0x0a0062f0, 0x39f5190a, 0x4f92205d, 0x59500e16};
{0x730102bd, 0x05612efa, 0x64780ead, 0x33784952, 0x622375b4, 0x3e3175ba, 0x33f24484, 0x02346ab6};
{0x2e0b4b2a, 0x114e378c, 0x6cd10da3, 0x434019fb, 0x403e1b3b, 0x09aa5e57, 0x36216b06, 0x0cc45477};
{0x65670d14, 0x7dff4950, 0x761a551f, 0x2a631392, 0x5a3614a4, 0x23053310, 0x4afa4465, 0x1edd0f5b};
{0x723b023f, 0x26fa0597, 0x3ac24ec4, 0x596b56d6, 0x54e21195, 0x106e3bb9, 0x31375959, 0x380878a6};
{0x67397c68, 0x38ba348f, 0x23da2279, 0x07bc09c6, 0x0c5828a5, 0x07d917a2, 0x53435bc0, 0x52595ec8};
{0x68540cd9, 0x2077756a, 0x073f0583, 0x32ab1fb4, 0x2bf239e8, 0x74c75d98, 0x71dc783e, 0x5ea5100d};
{0x32be41e0, 0x265a3e5f, 0x1cff08e0, 0x414d6a96, 0x3cd304df, 0x0776731b, 0x46173ebe, 0x7c7059a4};
{0x2e5e30df, 0x7e4f256f, 0x7d4f50c8, 0x6c873bfd, 0x1d782c1b, 0x1140545c, 0x1d18789d, 0x38221412};
{0x163f12a5, 0x0ba7386a, 0x24d35e7e, 0x20dc78a8, 0x43ed4079, 0x10a51921, 0x30bc6587, 0x50ea0498};
{0x56625839, 0x7509180c, 0x3bfa737b, 0x58875719, 0x757b2416, 0x745e146d, 0x4bf42f5e, 0x3007621f};
{0x740467de, 0x01697855, 0x129c3d7b, 0x44327aa7, 0x0def369b, 0x662c615c, 0x347b0c42, 0x578e684b};
{0x666610cf, 0x6d2e33ab, 0x56485484, 0x7c330071, 0x740401c1, 0x60ab7633, 0x0b77156a, 0x65dd3b9b};
{0x42557eb4, 0x746757cb, 0x51a303ff, 0x1d173b39, 0x1b21066f, 0x1ed32776, 0x069c3317, 0x6c251166};
{0x58750c89, 0x034542b3, 0x53427ecb, 0x11142b6b, 0x4d1a4904, 0x4cae3617, 0x5caa47a7, 0x2d2a45ee};
{0x0b7a584f, 0x256a3472, 0x61305431, 0x71530906, 0x7fca131a, 0x25644b14, 0x70671e2f, 0x3e771090};
{0x1a94214f, 0x07d6738c, 0x2def2139, 0x04b12f70, 0x28c521c7, 0x62ef747f, 0x349306fe, 0x0d790a7f};
{0x6dba39d6, 0x293a6ff2, 0x548b1439, 0x5aad36b7, 0x643303c7, 0x38a52fe1, 0x4f2455b2, 0x524c7a72};
{0x0ecd4909, 0x7f6a589d, 0x55580eb4, 0x789247e9, 0x230d57f2, 0x01f735d4, 0x7c3c3857, 0x424f76b8};
{0x1b5f2c72, 0x689f6ff4, 0x52fb6e40, 0x46ee1af4, 0x04a5439c, 0x6b603d82, 0x141a25c8, 0x7f6c67b3};
{0x0b27219f, 0x22886850, 0x2c833e25, 0x4240143c, 0x4bfb5b6d, 0x3c4d627f, 0x10ad649b, 0x3b365c00};
{0x5aaf7d4a, 0x20611e20, 0x17c9506e, 0x77de1064, 0x316601c1, 0x245b5fa2, 0x44921e97, 0x719f74fc};
{0x59ab6cf9, 0x5db87d0c, 0x0a7a4a75, 0x6b4217d3, 0x27964020, 0x587946e6, 0x42ed38b0, 0x1bb56fbf};
{0x05f33d87, 0x6147681d, 0x723e6cea, 0x034575b0, 0x4ebe315f, 0x1e5f05e7, 0x79d4144a, 0x28ac42f5};
{0x385f10ff, 0x5182553a, 0x3a45728a, 0x31203a14, 0x2de73df3, 0x51041373, 0x58030580, 0x3b554b5e};
{0x0b724250, 0x101a3f94, 0x45a039dd, 0x52eb2d80, 0x54f7099e, 0x683323f9, 0x61281f07, 0x785c7645};
{0x594d179a, 0x526f1340, 0x7aea194e, 0x05634669, 0x4af430cf, 0x54755c8d, 0x08fa3ff2, 0x259c6c43};
{0x6d7624ce, 0x65a21a2c, 0x0937716e, 0x24981e7a, 0x505805a5, 0x64a13181, 0x3bd61af6, 0x08773795}};

int main()
{
    XTime tStart, tEnd;
    double  ElapsedTime;

    init_platform();

    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x0U);

    uint32_t R[16];
    uint32_t busy = 0;

    XTime_GetTime(&tStart);
    for(int i=0;i<6;i++)
    {
        AMNS_mult(R,A[i],B[i]);
        display_coeff(R,4);
    }
    display_coeff(R,4);
    XTime_GetTime(&tEnd);
    printf("Output took %llu clock cycles.\n", 2*(tEnd - tStart));
	ElapsedTime = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND);
	printf(" Output took %.2f s.\n",ElapsedTime);
    cleanup_platform();
    return 0;
}

void AMNS_mult(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x0U);

	for(int i=0;i<4;i++)
    {
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i)*4, src1[2*i]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+1)*4, src1[2*i+1]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+8)*4, src2[2*i]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+1+8)*4, src2[2*i+1]);
    }

    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x3U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x7U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x5U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0xfU);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0xdU);

	for(int i=0;i<16;i++)
    {
    	dest[i] = AMNS_ARITH_IP_mReadReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, i*4+16*4);
    }
}

void display_coeff(uint32_t* src, uint32_t size)
{
    for(int i=0;i<size;i++)
    {
    	xil_printf("R[%d] : 0x%08x%08x%08x%08x\n",i,src[i*4], src[i*4+1], src[i*4+2], src[i*4+3]);
    }
}

void MgtMul(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    uint32_t S[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t S_MOD_R[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t T_16[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t T_8[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t M[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t U[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t TEMP[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t carry = 0;

    BigMul(S, src1, src2);
    for(uint32_t i=0;i<8;i++)
    {
        S_MOD_R[7-i] = S[15-i];
    }
    BigMul(T_16, S_MOD_R, V);
    for(uint32_t i=0;i<8;i++)
    {
        T_8[7-i] = T_16[15-i];
    }
    BigMul(T_16, T_8, P);
    carry = BigAdd(M, S, T_16, 0, 16);
    for(uint32_t i=0;i<8;i++)
    {
        U[7-i] = M[7-i];
    }
    if(carry == 1)
    {
        BigSub(U, U, P, 8);
    }
    else
    {
        carry = BigSub(TEMP, U, P, 8);
        if(carry == 1)
        {
            for(uint32_t i=0;i<8;i++)
            {
                U[7-i] = TEMP[7-i];
            }
        }
    }
    for(uint32_t i=0;i<8;i++)
    {
        dest[7-i] = U[7-i];
    }
}

void BigMul(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    uint32_t accu[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t carry = 0;
    uint32_t k = 0;
    uint64_t temp_0 = 0;
    uint32_t temp_1, temp_2, temp_3;
    for(uint32_t i=0;i<8;i++)
    {
        for(uint32_t j=0;j<8;j++)
        {
            temp_0 = ((uint64_t) src1[7-i]) * ((uint64_t) src2[7-j]);
            temp_1 = (uint32_t) temp_0;
            temp_2 = (uint32_t) (temp_0 >> 32);
            temp_3 = accu[15-(i+j)];
            accu[15-(i+j)] = accu[15-(i+j)] + temp_1;
            if(((uint64_t) temp_3 + (uint64_t) temp_1) > UINT32_MAX)
            {
                carry = 1;
            }
            else
            {
                carry = 0;
            }
            temp_3 = accu[15-(i+j+1)];
            accu[15-(i+j+1)] = accu[15-(i+j+1)] + temp_2 + carry;
            if(((uint64_t) temp_3 + (uint64_t) temp_2 + (uint64_t) carry) > UINT32_MAX)
            {
                carry = 1;
                k = 0;
                do {
                    k = k+1;
                    temp_3 = accu[15-(i+j+1+k)];
                    accu[15-(i+j+1+k)] = accu[15-(i+j+1+k)] + carry;
                    if(((uint64_t) temp_3 + 1) > UINT32_MAX)
                    {
                        carry = 1;
                    }
                    else
                    {
                        carry = 0;
                    }
                }while(carry == 1);
            }
        }
    }
    for(uint32_t i=0;i<16;i++)
    {
        dest[15-i] = accu[15-i];
    }
}

uint32_t BigSub(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t size)
{
    uint32_t accu[size];
    uint32_t carry = 1;
    for(uint32_t i=0;i<size;i++)
    {
        accu[size-1-i] = ~src2[size-1-i];
    }
    carry = BigAdd(dest, src1, accu, carry, size);
    return carry;
}

uint32_t BigAdd(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t c, uint32_t size)
{
    uint32_t accu[size];
    uint32_t carry = c;
    for(uint32_t i=0;i<size;i++)
    {
        accu[size-1-i] = src1[size-1-i] + src2[size-1-i] + carry;
        if(((uint64_t) src1[size-1-i] + (uint64_t) src2[size-1-i] + (uint64_t) carry) > UINT32_MAX)
        {
            carry = 1;
        }
        else
        {
            carry = 0;
        }
    }
    for(uint32_t i=0;i<size;i++)
    {
        dest[size-1-i] = accu[size-1-i];
    }
    return carry;
}
