/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xparameters.h"
#include "AMNS_arith_ip.h"
#include "xtime_l.h"

void AMNS_mult(uint32_t* dest, uint32_t* src1, uint32_t* src2);
void display_coeff(uint32_t* src, uint32_t size);
uint32_t BigAdd(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t c, uint32_t size);
uint32_t BigSub(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t size);
void BigMul(uint32_t* dest, uint32_t* src1, uint32_t* src2);
void MgtMul(uint32_t* dest, uint32_t* src1, uint32_t* src2);

uint32_t V[8] = {0xC9BD1905, 0x15538399, 0x9C46C2C2, 0x95F2B761, 0xBCB223FE, 0xDC24A059, 0xD838091D, 0xD2253531};
uint32_t P[8] = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFC2F};

uint32_t A[100][8] = {{0x2c5d354b, 0x120954ec, 0x78cd2256, 0x7e51289b, 0x4e8c0ce6, 0x7fe70a0e, 0x7aa04a6b, 0x6f6d13e9},
		{0x6f22316d, 0x0c8a1991, 0x01717caa, 0x40710781, 0x1ed72bb8, 0x31ee1801, 0x1181008e, 0x239b4bc9},
		{0x21637a5a, 0x07150c11, 0x07002cac, 0x53271231, 0x27fa185d, 0x727c5e38, 0x21a561ed, 0x27050ed9},
		{0x55917744, 0x664248f3, 0x259e2099, 0x4d657d80, 0x57310c6d, 0x73b751d3, 0x074a4447, 0x4fa16b34},
		{0x6aab71e2, 0x3645080a, 0x5b895b43, 0x19d36186, 0x070f521f, 0x7fd9654b, 0x62e33204, 0x1b971e1c},
		{0x16d955d0, 0x17bd7e4e, 0x77466d56, 0x775e31b2, 0x46e9004a, 0x13061052, 0x3d9207c2, 0x5cef0c06},
		{0x3ffe1489, 0x45e17600, 0x132e77c5, 0x6d9c64c1, 0x0d9274d5, 0x58462e6e, 0x05220659, 0x326b31d9},
		{0x69034af7, 0x3983100b, 0x397139c8, 0x73e3237f, 0x5e075736, 0x02641be6, 0x716233e7, 0x1b0d5fa8},
		{0x2d245ef7, 0x7030471a, 0x1eb84fd7, 0x7dcc2e0a, 0x314d3f26, 0x400a0cc9, 0x23292e94, 0x64c97e39},
		{0x761678a3, 0x181a3890, 0x232700d9, 0x2c7d364f, 0x0091051b, 0x685820f7, 0x53c1559e, 0x0d847b80},
		{0x11e551d5, 0x037b3081, 0x42ee3523, 0x0daa138b, 0x3c0673bb, 0x0f6e1785, 0x2bc17e5c, 0x3ff87b64},
		{0x5c1a24bb, 0x340c1647, 0x5f716170, 0x3eb2318a, 0x069121e0, 0x1f6a2fed, 0x09b81dcf, 0x6bda58f8},
		{0x220971cb, 0x620a2b5c, 0x189a7d51, 0x747d2f69, 0x4b86593b, 0x32ba29ca, 0x61b24d59, 0x65416581},
		{0x2d183927, 0x41e12b96, 0x0d561e75, 0x7c0d4098, 0x3c0e696d, 0x36223d30, 0x2c4e6162, 0x219a5577},
		{0x65574780, 0x022574d4, 0x0c820209, 0x1d8e5fcf, 0x51953a4f, 0x2a3662bf, 0x5bc47734, 0x09ec3cb8},
		{0x6f1643cf, 0x2a1f5ee7, 0x3fdf1ed1, 0x6a1372e1, 0x61113baa, 0x6f092128, 0x488b193f, 0x4e493264},
		{0x37985f9d, 0x6e140e11, 0x5f6f20f2, 0x082546e3, 0x13fa659f, 0x0a29258d, 0x04be5b95, 0x77414533},
		{0x1c1f769b, 0x09507aa1, 0x7e136d6a, 0x424e3bce, 0x29a11c7f, 0x40a6183e, 0x5f77624e, 0x45711529},
		{0x48944ac9, 0x441e3c3a, 0x262a3bb4, 0x47894acd, 0x2c7f2dd2, 0x7add195b, 0x1b6a5e23, 0x0a870717},
		{0x22382773, 0x2ffb2d2c, 0x42fa3929, 0x724572c5, 0x3dc633d4, 0x558142d8, 0x661b7d78, 0x0e99072d},
		{0x1c131dad, 0x368d0877, 0x497837f8, 0x030415b6, 0x08ea6990, 0x38982952, 0x328e6687, 0x35084e8f},
		{0x636b503f, 0x22a908f0, 0x7d9c54f6, 0x1b80532f, 0x39884d91, 0x0c232560, 0x457e4fa3, 0x654a75d8},
		{0x09dd70f1, 0x0ba73ff2, 0x06247f66, 0x75dc15c6, 0x6b047383, 0x13a3049a, 0x30f36069, 0x7c0a2bc0},
		{0x35bf0ee7, 0x19e10455, 0x110237ba, 0x13887c75, 0x2cf0599e, 0x7713283c, 0x5aa861b8, 0x390b3292},
		{0x3db9613c, 0x1db573d0, 0x6cf47fa5, 0x6f5a7d24, 0x68952a51, 0x70461e5a, 0x51613b6f, 0x78d672d5},
		{0x633d2553, 0x022b79c3, 0x54337c5b, 0x63e471fd, 0x1c056be3, 0x5cd917d6, 0x76a260a0, 0x2d6472c3},
		{0x37710f36, 0x5afe793c, 0x62b22a5e, 0x52c641f9, 0x6b6570a2, 0x46c82dbb, 0x22a06b44, 0x58b43bf4},
		{0x29eb796b, 0x7c0f27a2, 0x123761c3, 0x4a1c1b31, 0x7ed03c48, 0x37fe2494, 0x5e731d41, 0x19dd4fd3},
		{0x4acb1f88, 0x45cc695c, 0x20247538, 0x17681e6c, 0x313b2d1f, 0x23732de4, 0x0777678e, 0x5ceb6346},
		{0x3bd31518, 0x5c16305a, 0x0a174ad8, 0x37b94378, 0x415726b6, 0x370962e0, 0x4b230c85, 0x09ff472b},
		{0x1f903ada, 0x74652158, 0x321359dc, 0x488710a6, 0x4be14a6f, 0x268d5dfd, 0x36af2bf6, 0x5ac508f2},
		{0x3efd2640, 0x2ac71a53, 0x6eda3e84, 0x52421a39, 0x43a42b13, 0x3c824b21, 0x69bb4753, 0x3d513a31},
		{0x31880dd3, 0x11124259, 0x794655f1, 0x056d5ace, 0x211d373b, 0x045f4130, 0x3b103823, 0x3b881120},
		{0x4d6f7ecc, 0x24ab4ff5, 0x678867ae, 0x733f32de, 0x59bf6d49, 0x5ef239be, 0x5b420a92, 0x275c6e4e},
		{0x507a491c, 0x5a1b3187, 0x2a876b20, 0x0160030d, 0x6ab8662b, 0x05311ea3, 0x73620fbe, 0x7c7d23fa},
		{0x753314a5, 0x3a481fa9, 0x0f2a153e, 0x283804ce, 0x4bae353e, 0x68e06f21, 0x34c0372c, 0x6fa60cea},
		{0x202f215d, 0x21c81809, 0x4e9c1f11, 0x03a9538b, 0x367a4de6, 0x054b017e, 0x126d3a6e, 0x2eec2da5},
		{0x385101b1, 0x10293bd5, 0x74c63a1b, 0x32b66b71, 0x557b6edc, 0x58d40fb1, 0x7f3e5208, 0x71b9236e},
		{0x18704f3d, 0x4e616308, 0x424e7b6b, 0x67905a6f, 0x662a6915, 0x74f438ea, 0x1ef943dc, 0x781d5e4c},
		{0x0ccf03da, 0x7ed33ae3, 0x1b676d2f, 0x0840262f, 0x272e2a09, 0x615623d6, 0x37c2040e, 0x3d1d2340},
		{0x05030f64, 0x5a2d43ab, 0x36650dd6, 0x1c5c69e2, 0x2f92365f, 0x5875580f, 0x73cd3baf, 0x11572a15},
		{0x5cb77d07, 0x12d01739, 0x7a126961, 0x525f5870, 0x64cd1aaf, 0x68ef17f8, 0x4f571a26, 0x155861ca},
		{0x05b0227b, 0x53752f1b, 0x2fa967fc, 0x2557180b, 0x1c78386d, 0x48163614, 0x3fb23590, 0x47e44928},
		{0x06117320, 0x0ca62f41, 0x7bd10d99, 0x6e9a099c, 0x266218b5, 0x0a263c7f, 0x2b020538, 0x71f41873},
		{0x0e414d2a, 0x5c815e7f, 0x06e21f82, 0x19c73f13, 0x0aa575e6, 0x701f6e21, 0x05704927, 0x7d0a37ae},
		{0x5ae3100c, 0x60e04561, 0x7fab5cbf, 0x6e79251b, 0x77f42003, 0x138445d4, 0x23cd5a2c, 0x7e7964a2},
		{0x667c5818, 0x2b994f00, 0x68d74e13, 0x24f57d21, 0x2be17973, 0x10d85f60, 0x1bcf121b, 0x261235cf},
		{0x213721b5, 0x38030003, 0x58a97dbc, 0x17847a55, 0x598c5081, 0x07904c5d, 0x06bf51ea, 0x1a6d47c1},
		{0x2a2b0fee, 0x0b0541c6, 0x56511155, 0x0629345e, 0x05f351bc, 0x7e892cf7, 0x2d973015, 0x4c4447b2},
		{0x13141a02, 0x6e99698e, 0x4dd13b76, 0x63443cb3, 0x3f316e17, 0x1cd24c83, 0x14e0495b, 0x595a2737},
		{0x49144553, 0x590c3bf8, 0x24180af0, 0x10ab0af1, 0x72a51168, 0x21793e0e, 0x398f46bc, 0x0ce73580},
		{0x5e830edb, 0x152a706a, 0x1a2d04d6, 0x7f40039b, 0x10eb60ad, 0x3dd226ae, 0x03394165, 0x02c74c6c},
		{0x07004cf0, 0x07f806be, 0x7af4608d, 0x2bc26b03, 0x1fbd4f20, 0x75f13dce, 0x12807db9, 0x19450b60},
		{0x258a3a28, 0x703c66fe, 0x6cc56cc4, 0x4d004a76, 0x2ac2342b, 0x09191f47, 0x7ad15ef1, 0x123d64c8},
		{0x7bb67f6d, 0x1e0f2f41, 0x57ad3bd4, 0x52b702bc, 0x0f04258b, 0x0c391b5e, 0x5f3200b3, 0x36a4197b},
		{0x7e3479d1, 0x785903b4, 0x689f2a29, 0x620d70ad, 0x5cbf1879, 0x512e5eb4, 0x18b16ae8, 0x374301b3},
		{0x13003971, 0x359a06a9, 0x0b0a4a6c, 0x14d24443, 0x16423352, 0x089909e7, 0x1a6d7f53, 0x3e4d73f9},
		{0x72864fbf, 0x5a0860f3, 0x24c517eb, 0x07ee39a6, 0x6ae9617f, 0x1c99715f, 0x6ddf5230, 0x55611895},
		{0x0ca45ba4, 0x7ce0221e, 0x39d43dfe, 0x155b65c1, 0x5f3f1b1c, 0x23590091, 0x12f92d41, 0x1d887301},
		{0x008a61d8, 0x75d27d24, 0x2c3f34f4, 0x3c2b4ccb, 0x0d490726, 0x25e347ae, 0x7f6525b3, 0x041f02d6},
		{0x7c6b4aaf, 0x362b5ac7, 0x5cd34c31, 0x0b9a615d, 0x67c20392, 0x28c03a83, 0x6b9d4224, 0x559c32bb},
		{0x1a477a05, 0x603d3aad, 0x7e13242a, 0x304d3583, 0x6fe52554, 0x5b93360b, 0x464b1a57, 0x0f067dde},
		{0x4a1d6f3a, 0x37c14dcc, 0x40cf2eae, 0x42d77540, 0x0195175c, 0x791736e6, 0x1b2279a4, 0x7bd31350},
		{0x25c5062f, 0x61d35ff7, 0x0d4b2c77, 0x49db6335, 0x32c77bf2, 0x603174dd, 0x2f970906, 0x759d2b15},
		{0x318235ec, 0x6beb5c56, 0x0690231c, 0x1a592391, 0x527e0521, 0x08a638e1, 0x6c51136a, 0x397338e8},
		{0x7d0d183c, 0x771c176a, 0x40ef38c2, 0x225d294b, 0x69f76ee9, 0x0a45208c, 0x1c536ea7, 0x6b6c0fe4},
		{0x42610f6e, 0x50f12b8d, 0x22dd6b24, 0x05693279, 0x54467f89, 0x5fb5479d, 0x7df0531e, 0x4bc50baa},
		{0x6e266616, 0x509f6f6e, 0x740557f3, 0x075c3f2c, 0x1d7b061f, 0x64583980, 0x61866c22, 0x57fc15b1},
		{0x60847067, 0x791b2498, 0x5e804c6e, 0x0b4f2c20, 0x54b53d3e, 0x1a8c2e42, 0x42c70068, 0x041137bf},
		{0x3b1849a3, 0x52e45a6c, 0x75973cf1, 0x7a5f4040, 0x495d6d7e, 0x2cf12420, 0x4839465f, 0x56d409e5},
		{0x43b15180, 0x0ab1749f, 0x563f10a1, 0x47535ead, 0x759278e5, 0x69737bf7, 0x01a066ee, 0x479f2d4f},
		{0x19ec40cd, 0x16732eca, 0x08ac3ea6, 0x30ee2bef, 0x5da574ed, 0x569928d6, 0x0d736645, 0x377d1de9},
		{0x77b12f61, 0x3ffa0ccc, 0x7ae30565, 0x68bd5c49, 0x2ca77129, 0x10b103e4, 0x5541565b, 0x0fb62081},
		{0x34a96d7a, 0x67d526f2, 0x644d57f9, 0x149165a1, 0x3e591053, 0x07d7740a, 0x623c58be, 0x7d7d6724},
		{0x5c4c0ab1, 0x673f2245, 0x11347c64, 0x32d47b1b, 0x43ba68af, 0x688f5d32, 0x2c732255, 0x699f097d},
		{0x29571594, 0x4791614a, 0x338127d2, 0x42d134be, 0x4383579a, 0x1b331622, 0x6b9c4eb2, 0x605e5efd},
		{0x25496819, 0x62c82e32, 0x31f94b43, 0x7ce1554c, 0x58942622, 0x5d556309, 0x49fe2284, 0x76a3246c},
		{0x09ff2302, 0x6a2f603c, 0x15507119, 0x0d3544ae, 0x392a06a9, 0x1f350387, 0x429c1d07, 0x4ba762de},
		{0x5a725040, 0x28dd6dbc, 0x49fc4bad, 0x322c4903, 0x5cfd7428, 0x6f4b3490, 0x44aa3292, 0x6c087176},
		{0x5ca723ac, 0x38370a2f, 0x1cc21ab6, 0x794624d9, 0x5f577d68, 0x566614a1, 0x74433ca6, 0x5ee1342e},
		{0x578d4fcf, 0x43c6620b, 0x1a035b48, 0x51fd7869, 0x16bc2169, 0x32b834f0, 0x073f3224, 0x131634c2},
		{0x1b5a497a, 0x4e32298b, 0x50e02f92, 0x408a48a8, 0x6a113fbf, 0x374d05d8, 0x019a4a77, 0x6d937854},
		{0x4c63776d, 0x51ca5046, 0x36d75bbc, 0x6f9c49a6, 0x1f9b008f, 0x4fe60b50, 0x508404e5, 0x49177679},
		{0x341d6a54, 0x7ca86cb7, 0x2cb15e93, 0x508b0781, 0x01607596, 0x6c737795, 0x5fa70762, 0x7f4538ba},
		{0x3cbc5bc3, 0x05334195, 0x094032b2, 0x325066e1, 0x6560683f, 0x031b22d9, 0x3342127a, 0x7f5102c2},
		{0x08fa0022, 0x481f661d, 0x1f3d7aa2, 0x4ad11ccd, 0x414c6ad5, 0x545e6e3e, 0x77745850, 0x4f8062c7},
		{0x00601578, 0x24470321, 0x4e0549d2, 0x55633e42, 0x29d43323, 0x1ca02ab3, 0x1641468e, 0x3b0d69c6},
		{0x6ff828cc, 0x69210c24, 0x0b8d7aa8, 0x04e227f5, 0x39de0f64, 0x0198523d, 0x26094627, 0x4dca47e3},
		{0x43164135, 0x094f2612, 0x15f00ec3, 0x281b01f2, 0x02bf3fe3, 0x00bd1605, 0x344910c7, 0x15937fac},
		{0x331f263a, 0x4c353934, 0x48a8798b, 0x08482c5f, 0x6f1d772b, 0x3aa96ff8, 0x3c6c7dd1, 0x1dae1d76},
		{0x04a77fa2, 0x22927f90, 0x45c7732e, 0x0dc12819, 0x59e97127, 0x27b91bf7, 0x1c2264cd, 0x3c2b5c9d},
		{0x10785e55, 0x11e42bb5, 0x21963635, 0x128b1175, 0x59125a13, 0x7a1777d9, 0x7fa75034, 0x16b17ce8},
		{0x18dc7566, 0x725a28c2, 0x16536cba, 0x7d9c6ade, 0x6d192d96, 0x1dde37b3, 0x30933a49, 0x701d5cc1},
		{0x3a0a5b03, 0x0eb4060f, 0x5560138c, 0x1531229e, 0x63c31402, 0x6e6c7e46, 0x28c2323a, 0x445d63a2},
		{0x277b4b2a, 0x0eed7ed0, 0x145c7510, 0x02f6486a, 0x4e195fd8, 0x0372285e, 0x28660ce3, 0x06b0203f},
		{0x55de4a2d, 0x4b2f4eab, 0x170d187a, 0x35c40f41, 0x6f3a24e1, 0x7a2f7ba9, 0x64c33cca, 0x6639330a},
		{0x2c4c2d95, 0x229422e3, 0x20aa09d7, 0x3d1502e5, 0x62af7696, 0x0cbe7123, 0x0e615c42, 0x692e0b40},
		{0x7dfa7dbc, 0x03dd6fef, 0x0da56fe6, 0x4dcc6ac8, 0x4f7f3099, 0x33e94c69, 0x54b42ccb, 0x6fcd3089},
		{0x77194d50, 0x6b977a23, 0x70042cb8, 0x5f422076, 0x64a46478, 0x020a5928, 0x414d2c0f, 0x14dd45eb},
		{0x40686b96, 0x29453844, 0x543168b7, 0x6acf2c9a, 0x4c987f10, 0x662130ee, 0x0d9c6327, 0x08a20588}};

uint32_t B[100][8] = {		{0x2ba85f02, 0x3c3e2db7, 0x0b33635b, 0x30c56b45, 0x61bf2025, 0x3f9e6b95, 0x73f103f1, 0x1b063c69},
		{0x1f302da5, 0x5fef5a13, 0x79b875d7, 0x4e57301f, 0x228f7c30, 0x0f5f4da0, 0x188464c5, 0x0c3f3f6d},
		{0x41c21b54, 0x7ad12ac7, 0x4f003767, 0x0ce6717b, 0x3bca2446, 0x35c17793, 0x2d176f91, 0x20f01ee1},
		{0x105801cf, 0x00636bc2, 0x01422e2d, 0x6deb34bf, 0x016c37e0, 0x622c2ae7, 0x72735a8d, 0x0a2c4fa1},
		{0x052f3eee, 0x2197227d, 0x6c303685, 0x62ed0540, 0x288b6f82, 0x68bc104a, 0x47857e96, 0x5fe5617c},
		{0x7dea49fe, 0x172a67bb, 0x61d84ca1, 0x73145de2, 0x0d356607, 0x450e352b, 0x0c711167, 0x45f20b8d},
		{0x15b70a77, 0x3ed909ff, 0x678e725c, 0x36213cbb, 0x31cc0482, 0x70d70ce1, 0x720444a9, 0x252b3c62},
		{0x45ed0c19, 0x64cb2c64, 0x0680301b, 0x3b5832f0, 0x5df45e8f, 0x528f3cd4, 0x4b877a3b, 0x37182c98},
		{0x67224298, 0x74df1a75, 0x19e10095, 0x1dcc7215, 0x355369ed, 0x7a5a0880, 0x2f5c5972, 0x520b2bba},
		{0x3a6a7208, 0x5dce7c27, 0x4e445b83, 0x58421f51, 0x7fb01d5f, 0x5937764a, 0x08bb29f1, 0x09265029},
		{0x41372ff8, 0x79f15108, 0x2ff07ad7, 0x45344375, 0x64e82a6c, 0x458d6251, 0x56555898, 0x5bcd6fac},
		{0x216849b3, 0x2abc7d6b, 0x0c2c75c1, 0x0f57726d, 0x7272425f, 0x5b8d79f5, 0x11175971, 0x1ba577aa},
		{0x3fbf1f40, 0x18576edf, 0x2a847ecb, 0x6ba11304, 0x465554a7, 0x26b83d79, 0x11b761c4, 0x4bb90c62},
		{0x34ef0502, 0x281b3a97, 0x073f49be, 0x5a215fad, 0x2a411177, 0x1019443e, 0x25a365a3, 0x021c0882},
		{0x52836117, 0x2e587924, 0x5e652e18, 0x645d06ea, 0x33617b45, 0x06220123, 0x6049189d, 0x3f174a01},
		{0x230839dd, 0x66762215, 0x7a854660, 0x66277e77, 0x0f25728f, 0x6163358b, 0x7b664f70, 0x04134c19},
		{0x3d484a26, 0x2e3e38fc, 0x745b2e67, 0x16af094e, 0x59d334ef, 0x60145875, 0x14d424cc, 0x672e34b4},
		{0x0db9222c, 0x2a52064c, 0x15067e90, 0x14f14a34, 0x7d26718f, 0x6df41245, 0x3b683bbe, 0x1d126fd7},
		{0x17d93314, 0x1e4f3b91, 0x692e2960, 0x7dde4858, 0x3b741c4c, 0x44d63297, 0x562031f8, 0x09471ca1},
		{0x0b0c1bd7, 0x6c391da4, 0x79cb2937, 0x7c08224d, 0x444d3e5f, 0x085302d5, 0x02b17377, 0x7ca20524},
		{0x4dfd788a, 0x18d4520b, 0x0da54caa, 0x29333632, 0x2e0c5005, 0x58b042b2, 0x1ef56fca, 0x7eaa15f0},
		{0x250928c6, 0x58b20285, 0x3fdb213b, 0x64f34a28, 0x28a12ce8, 0x370813a1, 0x624a6381, 0x064a0168},
		{0x1f7b7b30, 0x4c141192, 0x068a49ee, 0x3bf60901, 0x5b6372c1, 0x53ea7fee, 0x3e1b11ea, 0x349f78ca},
		{0x59b76ee1, 0x50463357, 0x723e6586, 0x4d3a692f, 0x622a3510, 0x349c3513, 0x5f3a1cc6, 0x51933e0b},
		{0x201c1fad, 0x7a59534c, 0x4ca356d3, 0x6d6f3af0, 0x41402b29, 0x02cb2572, 0x56594fff, 0x2c6e6157},
		{0x1b1e3811, 0x677b1282, 0x0ffd18fe, 0x66660ac9, 0x1cf172c0, 0x6f963b92, 0x7289542c, 0x2a047875},
		{0x37a84eaa, 0x79e93464, 0x2cb92d02, 0x08e50a24, 0x316c23e4, 0x459c3267, 0x5e7965b1, 0x7b5e2fbe},
		{0x4f46723c, 0x66dc666e, 0x0c1f028d, 0x15fe1e5d, 0x78fd25e1, 0x0a7e5f85, 0x093f629d, 0x0f25520e},
		{0x21e774ce, 0x350d1600, 0x47930a22, 0x6da278c8, 0x51b00b9b, 0x10a669f4, 0x214112aa, 0x4ab80828},
		{0x50382f4b, 0x4aee5984, 0x4dac0d1a, 0x758a7755, 0x0a573259, 0x5bdd3d56, 0x04654500, 0x347e503f},
		{0x6ea002c2, 0x2a0d1d49, 0x11fb2fdc, 0x0eec4d02, 0x1bd214f6, 0x6c2e5342, 0x3d7a1a8f, 0x57c552bc},
		{0x6bfb2527, 0x443b7a2a, 0x2fad478c, 0x52924d18, 0x59052012, 0x6e39556c, 0x39031c3c, 0x01985c6e},
		{0x019d6d2d, 0x6b313366, 0x54b763d8, 0x740c10fa, 0x5d9a769c, 0x747f3979, 0x25ec450b, 0x73ca3ba3},
		{0x64972db6, 0x374a3ac9, 0x012964cd, 0x2e9f3b0e, 0x61111af2, 0x001d0c2f, 0x701f2d3b, 0x11fa4405},
		{0x12a42cb8, 0x1ec1057f, 0x2c906fbd, 0x384a12da, 0x38d26b36, 0x59e02bc0, 0x215e5dc4, 0x04123304},
		{0x701546e2, 0x3ca371ca, 0x05283bc4, 0x3f38409f, 0x128272e3, 0x040e2a07, 0x66c360e4, 0x352c386a},
		{0x2d7e3e0b, 0x7f0404be, 0x0a4e2134, 0x0aed64c7, 0x2340316b, 0x60987d3f, 0x4a993462, 0x01e46d08},
		{0x387c1292, 0x20cf5993, 0x72b24759, 0x6de64133, 0x51611bcc, 0x20965b5c, 0x4df6441f, 0x6eb74f07},
		{0x31f321cd, 0x5a436649, 0x32b949e4, 0x2f3f5ceb, 0x66ae0be4, 0x60f0451f, 0x10661c8e, 0x7a8761d6},
		{0x5bd456ae, 0x6455108e, 0x74d02674, 0x58300432, 0x75b52d94, 0x303c3096, 0x4ac107d4, 0x76220142},
		{0x53ca5ca6, 0x12c62348, 0x3e983f76, 0x7c86156e, 0x20e24149, 0x47305e88, 0x358b6df0, 0x0f444d98},
		{0x6c257d1d, 0x3bbd1922, 0x2a891bfd, 0x4f9e3504, 0x4b866425, 0x41881e1d, 0x762a00eb, 0x36f52c85},
		{0x1acd7740, 0x1ed578e4, 0x1ab55b91, 0x5e0b6c78, 0x43a41c41, 0x13a068a1, 0x50d0042f, 0x75633073},
		{0x6f7813c9, 0x0f9059b6, 0x26e60edc, 0x59b86311, 0x12dd1f66, 0x17037c5a, 0x5d3c284d, 0x50b91237},
		{0x62c27e40, 0x08b86844, 0x07d67bde, 0x5316042f, 0x14be6b74, 0x5a874693, 0x4cff3ef3, 0x762c4e91},
		{0x5fd44c99, 0x7c541cb4, 0x70ed09fa, 0x300701c2, 0x7fc1633f, 0x273407b3, 0x00fc1ae0, 0x16f557bf},
		{0x5b720251, 0x6eb63692, 0x1ac40204, 0x6eee42be, 0x2df6018b, 0x442f1f85, 0x68de01e6, 0x6ee6301a},
		{0x2b427d75, 0x52941083, 0x03a83c3d, 0x4012687d, 0x3a3a5798, 0x1ca46091, 0x5674198d, 0x11310687},
		{0x08a51819, 0x03196cf3, 0x3c4753ac, 0x58dd524b, 0x7d16352e, 0x0cde5ea0, 0x373734ae, 0x50db2136},
		{0x33c92045, 0x16d5478b, 0x4e1f788e, 0x2b6152ab, 0x5e504859, 0x55d90b5d, 0x46ab093d, 0x7af50bf6},
		{0x42225840, 0x0c275891, 0x29265a7e, 0x4c2920ff, 0x43e46104, 0x04dd330c, 0x1ed042f3, 0x2151320b},
		{0x4f7152f1, 0x01a13834, 0x335935d6, 0x477d5fb5, 0x7c0c256b, 0x655d707d, 0x2ea972d6, 0x43ca3974},
		{0x33b35f6f, 0x64290a94, 0x722b0421, 0x181b6101, 0x182963b6, 0x10740ff0, 0x5a711c5e, 0x799136c4},
		{0x48425762, 0x7f7f3ce6, 0x0a5e0efb, 0x1ded1301, 0x177502b4, 0x11b85c5b, 0x5f770341, 0x0f374469},
		{0x5d1e4e4e, 0x79665824, 0x7c1c423e, 0x1ffb087a, 0x63ac1feb, 0x27ea2c74, 0x78e43496, 0x06e34787},
		{0x5c45137e, 0x30f81409, 0x1e3642e7, 0x6c3953f9, 0x2893181d, 0x55707f5d, 0x1e1c0b67, 0x34c5463d},
		{0x122c4984, 0x4e285a67, 0x7fc20a7c, 0x5b115191, 0x64377c4c, 0x578903c2, 0x5cf00344, 0x0a8e407c},
		{0x3d81112e, 0x6a936005, 0x2dea3480, 0x23ea6e04, 0x1b6f418e, 0x5f0f6ded, 0x23a0002f, 0x3ffa3c59},
		{0x7aa579ba, 0x78b56e88, 0x09e55684, 0x54a43a6f, 0x2b906381, 0x3f9754ff, 0x3d5c0410, 0x59dc41cd},
		{0x11fe7e5b, 0x34d82742, 0x6c806ab0, 0x6a871089, 0x50107ef0, 0x111d2072, 0x1d0c7a80, 0x70610823},
		{0x12510b97, 0x235735ad, 0x7b4d23fd, 0x2bfe053b, 0x1f804431, 0x145d2356, 0x24f136a1, 0x5e132f9f},
		{0x73c52ceb, 0x4c4f5429, 0x0103105d, 0x19984ef2, 0x1a7f7429, 0x02207354, 0x2b673744, 0x397f6f04},
		{0x28f82fc4, 0x0c5314ff, 0x08c17490, 0x1465381e, 0x79cf1104, 0x1e2335ed, 0x72771ea0, 0x147c321d},
		{0x70dd12c8, 0x21813520, 0x06787471, 0x3ea620a6, 0x42c26923, 0x7ca226fa, 0x63b91762, 0x42de1a65},
		{0x62611ae8, 0x05f435a5, 0x3b0b4de5, 0x55221d40, 0x484540a4, 0x393117ec, 0x58b643b4, 0x0e5f356c},
		{0x0b4e49d8, 0x58f57c90, 0x0be909d3, 0x1b38610d, 0x04e349c4, 0x7f2a5fce, 0x4f0a1fc2, 0x680517ac},
		{0x365505ac, 0x768104c7, 0x6ef139a3, 0x497d42c8, 0x6caa4db6, 0x55ce187c, 0x5e753186, 0x710469b7},
		{0x39211005, 0x4b3340e2, 0x145d676b, 0x24d64f8f, 0x10e925f6, 0x3c412637, 0x6a63794c, 0x387c5843},
		{0x709c2cb8, 0x5841338f, 0x553c4573, 0x60bd7ade, 0x1cc536e5, 0x78434ac5, 0x5e7e77be, 0x75b24324},
		{0x645d4735, 0x04c47c7c, 0x16dd4821, 0x05080f94, 0x0add31a0, 0x1a6d669d, 0x26cb70e8, 0x77cc3190},
		{0x30fe50b3, 0x397d3723, 0x72b402fc, 0x1e2c5bac, 0x625f7ed6, 0x38d905ee, 0x07972a03, 0x69b379db},
		{0x6b0a7552, 0x462f0dc8, 0x7e700add, 0x19572884, 0x0ac644aa, 0x34397168, 0x694b777e, 0x1d7c5cfd},
		{0x6b433645, 0x3c7e48ab, 0x202007e7, 0x19103f57, 0x1b402c34, 0x43d5651f, 0x5c895ffd, 0x2e4d0a05},
		{0x1f314443, 0x03fc372c, 0x2a1e3287, 0x734a05c7, 0x1cac5afb, 0x582a7b01, 0x0aea21f6, 0x551477f0},
		{0x67322617, 0x17896550, 0x0a496ddb, 0x7cb2440a, 0x793049a5, 0x59824782, 0x341b3555, 0x38c933ca},
		{0x46d901f0, 0x66b41f12, 0x6cef6607, 0x586a76c5, 0x4098147d, 0x08ca1bce, 0x58b02938, 0x7e1c03d3},
		{0x40946cd1, 0x14e94e39, 0x31f85281, 0x085a4beb, 0x01f765d1, 0x4e27503c, 0x391749b3, 0x126f7b51},
		{0x1c0a2041, 0x4ade4fe1, 0x0dec7045, 0x423d2ee7, 0x6a903517, 0x7ca05038, 0x13a56a2c, 0x2c1d660d},
		{0x67315b1b, 0x12e40890, 0x6bf35781, 0x0f507d22, 0x0f5c1362, 0x0a0b6678, 0x6a4340be, 0x588628c3},
		{0x4ccc351e, 0x41023801, 0x481c402a, 0x5e4d4593, 0x029f24b1, 0x1e3478a8, 0x70d265bb, 0x269f6806},
		{0x1ed1459b, 0x03c45d7a, 0x61022282, 0x78db41d8, 0x4f2968fd, 0x0977355c, 0x1a69421f, 0x3c584847},
		{0x7b287a6f, 0x0da829da, 0x4a88689c, 0x0e223632, 0x64ca6f34, 0x0c0f5984, 0x193e40cb, 0x69283726},
		{0x7f3c04fc, 0x6dcf5a21, 0x0def5d2c, 0x40444835, 0x4324014c, 0x5cb32c10, 0x704f797e, 0x032b2a06},
		{0x3d254e1c, 0x29595bd4, 0x38362084, 0x6742602d, 0x611b4486, 0x18b81b35, 0x29f14445, 0x234264d5},
		{0x743975e4, 0x6b4e4fad, 0x43813528, 0x74d40260, 0x41167af7, 0x28077dbd, 0x66be1681, 0x06486228},
		{0x1ccc320d, 0x409c6857, 0x283042cb, 0x333706ea, 0x3b997890, 0x4ab74a24, 0x33f45d12, 0x3874667b},
		{0x3d9278fc, 0x2a885346, 0x267f5c1e, 0x39d02682, 0x72c678a6, 0x23bb218b, 0x4c7d4cd3, 0x32f748d4},
		{0x18244c2b, 0x33fa4dcb, 0x257e4e57, 0x6f8951d3, 0x2c4c033a, 0x5c9556b8, 0x3c4e1c18, 0x40461580},
		{0x6f0d72eb, 0x6dc73e12, 0x2fb207b5, 0x46832ec2, 0x55fe2100, 0x1c1652a1, 0x4456541a, 0x0a7f7a32},
		{0x2135665c, 0x17fa6e98, 0x2f266612, 0x4dbe4c4f, 0x5f3d006d, 0x3cd91558, 0x3c073641, 0x06412f4c},
		{0x70734c59, 0x0b512d3c, 0x2be27196, 0x66345949, 0x3c841ead, 0x71611028, 0x450f67ff, 0x222a566b},
		{0x1e076e89, 0x35241126, 0x383250e3, 0x336065c5, 0x7473300f, 0x0e0b3e6e, 0x20280474, 0x09ec5547},
		{0x7d8b71f0, 0x6d7001ea, 0x3bd65769, 0x782a283e, 0x4c212056, 0x17e51d47, 0x19714829, 0x233e01a7},
		{0x68a3769b, 0x08005fdd, 0x27a979b1, 0x39f7719f, 0x7ff67609, 0x26b46e61, 0x49b80399, 0x7ed00cda},
		{0x261f5455, 0x12696145, 0x54587ad5, 0x6fae61ca, 0x7e9d58a3, 0x17e70127, 0x60443841, 0x4b04640d},
		{0x4f103478, 0x41176926, 0x58946f66, 0x2f092744, 0x09cf5a44, 0x115b2599, 0x0dbf5497, 0x4c733f6b},
		{0x4df56833, 0x0c873474, 0x3e2e2182, 0x54081015, 0x21c07e3b, 0x0db206ef, 0x0c507fee, 0x6ac429c6},
		{0x1356020a, 0x44f01f67, 0x19fa64e9, 0x1420221c, 0x0e0508a7, 0x0c88487e, 0x35463c58, 0x0e5f3a64},
		{0x2cd72630, 0x0211289f, 0x16211519, 0x40800146, 0x57524bc7, 0x298d3dc8, 0x645c6ad9, 0x67c642f9},
		{0x6b7e5d37, 0x2c135909, 0x2ee33122, 0x1ec3618f, 0x7ca05119, 0x0ac31f78, 0x7d5323c3, 0x141c2f2b}};

int main()
{
    XTime tStart, tEnd;
    double  ElapsedTime;

    init_platform();

    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x0U);

    uint32_t R[16];
    uint32_t busy = 0;

    XTime_GetTime(&tStart);
    for(int i=0;i<25;i++)
    {
        AMNS_mult(R,A[i],B[i]);
        display_coeff(R,4);
    }
    display_coeff(R,4);
    XTime_GetTime(&tEnd);
    printf("Output took %llu clock cycles.\n", 2*(tEnd - tStart));
	ElapsedTime = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND);
	printf(" Output took %.2f s.\n",ElapsedTime);
    cleanup_platform();
    return 0;
}

void AMNS_mult(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x0U);

	for(int i=0;i<4;i++)
    {
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i)*4, src1[2*i]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+1)*4, src1[2*i+1]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+8)*4, src2[2*i]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+1+8)*4, src2[2*i+1]);
    }

    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x3U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x7U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x5U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0xfU);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0xdU);

	for(int i=0;i<16;i++)
    {
    	dest[i] = AMNS_ARITH_IP_mReadReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, i*4+16*4);
    }
}

void display_coeff(uint32_t* src, uint32_t size)
{
    for(int i=0;i<size;i++)
    {
    	xil_printf("R[%d] : 0x%08x%08x%08x%08x\n",i,src[i*4], src[i*4+1], src[i*4+2], src[i*4+3]);
    }
}

void MgtMul(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    uint32_t S[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t S_MOD_R[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t T_16[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t T_8[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t M[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t U[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t TEMP[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t carry = 0;

    BigMul(S, src1, src2);
    for(uint32_t i=0;i<8;i++)
    {
        S_MOD_R[7-i] = S[15-i];
    }
    BigMul(T_16, S_MOD_R, V);
    for(uint32_t i=0;i<8;i++)
    {
        T_8[7-i] = T_16[15-i];
    }
    BigMul(T_16, T_8, P);
    carry = BigAdd(M, S, T_16, 0, 16);
    for(uint32_t i=0;i<8;i++)
    {
        U[7-i] = M[7-i];
    }
    if(carry == 1)
    {
        BigSub(U, U, P, 8);
    }
    else
    {
        carry = BigSub(TEMP, U, P, 8);
        if(carry == 1)
        {
            for(uint32_t i=0;i<8;i++)
            {
                U[7-i] = TEMP[7-i];
            }
        }
    }
    for(uint32_t i=0;i<8;i++)
    {
        dest[7-i] = U[7-i];
    }
}

void BigMul(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    uint32_t accu[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t carry = 0;
    uint32_t k = 0;
    uint64_t temp_0 = 0;
    uint32_t temp_1, temp_2, temp_3;
    for(uint32_t i=0;i<8;i++)
    {
        for(uint32_t j=0;j<8;j++)
        {
            temp_0 = ((uint64_t) src1[7-i]) * ((uint64_t) src2[7-j]);
            temp_1 = (uint32_t) temp_0;
            temp_2 = (uint32_t) (temp_0 >> 32);
            temp_3 = accu[15-(i+j)];
            accu[15-(i+j)] = accu[15-(i+j)] + temp_1;
            if(((uint64_t) temp_3 + (uint64_t) temp_1) > UINT32_MAX)
            {
                carry = 1;
            }
            else
            {
                carry = 0;
            }
            temp_3 = accu[15-(i+j+1)];
            accu[15-(i+j+1)] = accu[15-(i+j+1)] + temp_2 + carry;
            if(((uint64_t) temp_3 + (uint64_t) temp_2 + (uint64_t) carry) > UINT32_MAX)
            {
                carry = 1;
                k = 0;
                do {
                    k = k+1;
                    temp_3 = accu[15-(i+j+1+k)];
                    accu[15-(i+j+1+k)] = accu[15-(i+j+1+k)] + carry;
                    if(((uint64_t) temp_3 + 1) > UINT32_MAX)
                    {
                        carry = 1;
                    }
                    else
                    {
                        carry = 0;
                    }
                }while(carry == 1);
            }
        }
    }
    for(uint32_t i=0;i<16;i++)
    {
        dest[15-i] = accu[15-i];
    }
}

uint32_t BigSub(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t size)
{
    uint32_t accu[size];
    uint32_t carry = 1;
    for(uint32_t i=0;i<size;i++)
    {
        accu[size-1-i] = ~src2[size-1-i];
    }
    carry = BigAdd(dest, src1, accu, carry, size);
    return carry;
}

uint32_t BigAdd(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t c, uint32_t size)
{
    uint32_t accu[size];
    uint32_t carry = c;
    for(uint32_t i=0;i<size;i++)
    {
        accu[size-1-i] = src1[size-1-i] + src2[size-1-i] + carry;
        if(((uint64_t) src1[size-1-i] + (uint64_t) src2[size-1-i] + (uint64_t) carry) > UINT32_MAX)
        {
            carry = 1;
        }
        else
        {
            carry = 0;
        }
    }
    for(uint32_t i=0;i<size;i++)
    {
        dest[size-1-i] = accu[size-1-i];
    }
    return carry;
}
