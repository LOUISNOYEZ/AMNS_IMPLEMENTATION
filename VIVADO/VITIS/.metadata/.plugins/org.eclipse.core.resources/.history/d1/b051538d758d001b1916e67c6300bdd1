/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xparameters.h"
#include "AMNS_arith_ip.h"
#include "time.h"

void AMNS_mult(uint32_t* dest, uint32_t* src1, uint32_t* src2);
void display_coeff(uint32_t* src, uint32_t size);
uint32_t BigAdd(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t c, uint32_t size);
uint32_t BigSub(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t size);
void BigMul(uint32_t* dest, uint32_t* src1, uint32_t* src2);
void MgtMul(uint32_t* dest, uint32_t* src1, uint32_t* src2);

uint32_t P[8] = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFC2F};

uint32_t A[6][8] = {{0x0000427a, 0x0000336b, 0x000017e7, 0x000050e2, 0x00000f96, 0x00003d6a, 0x00004ff9, 0x664e2400},
					{0x0000742b, 0x00003c56, 0x0000133c, 0x00005e6f, 0x000051c9, 0x00000f30, 0x000031cf, 0x664e2400},
					{0x000014c0, 0x000015e2, 0x000023d7, 0x0000681b, 0x000012a9, 0x000003b5, 0x00006ffe, 0x664e2400},
					{0x000078de, 0x000041db, 0x000021ef, 0x00000fc2, 0x00004afe, 0x000061e7, 0x000050db, 0x664e2400},
					{0x0000716a, 0x00002050, 0x000035f7, 0x00004980, 0x000057ca, 0x000076f2, 0x000052fb, 0x664e2400},
					{0x000007E9, 0xB3B43236, 0x00000131, 0xDA92C3F1, 0x00000681, 0x6A4D482E, 0x00000190, 0x7B809982}};

uint32_t B[6][8] = {{0x000047d1, 0x000041ad, 0x000075a3, 0x000060bd, 0x00005e3c, 0x0000686b, 0x0000590e, 0x0000427a},
					{0x0000409f, 0x000075e9, 0x00002c8d, 0x00001a36, 0x00000ccf, 0x0000239e, 0x00000a3d, 0x0000742b},
					{0x00005053, 0x00003853, 0x00002432, 0x00006464, 0x00006ce7, 0x000010a4, 0x000010f0, 0x000014c0},
					{0x00004cfc, 0x00007783, 0x000067f3, 0x00000db2, 0x00006836, 0x00004eb5, 0x00002e28, 0x000078de},
					{0x000017ed, 0x00000753, 0x00001272, 0x00006dc7, 0x00003bad, 0x00006a4a, 0x00007a26, 0x0000716a},
					{0x000007C8, 0x19473440, 0x00000056, 0x5E062404, 0x0000003F, 0x43C62E91, 0x000004AF, 0x05145D7D}};


int main()
{
    init_platform();

    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x0U);

    uint32_t R[16];
    uint32_t busy = 0;

    for(int i=0;i<6;i++)
    {
        AMNS_mult(R,A[i],B[i]);
        display_coeff(R,4);
    }
    display_coeff(R,4);

    cleanup_platform();
    return 0;
}

void AMNS_mult(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x0U);

	for(int i=0;i<4;i++)
    {
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i)*4, src1[2*i]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+1)*4, src1[2*i+1]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+8)*4, src2[2*i]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+1+8)*4, src2[2*i+1]);
    }

    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x3U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x7U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x5U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0xfU);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0xdU);

	for(int i=0;i<16;i++)
    {
    	dest[i] = AMNS_ARITH_IP_mReadReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, i*4+16*4);
    }
}

void display_coeff(uint32_t* src, uint32_t size)
{
    for(int i=0;i<size;i++)
    {
    	xil_printf("R[%d] : 0x%8x%8x%8x%8x\n",i,src[i*4], src[i*4+1], src[i*4+2], src[i*4+3]);
    }
}

void MgtMul(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    uint32_t S[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t S_MOD_R[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t T_16[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t T_8[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t M[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t U[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t TEMP[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t carry = 0;

    BigMul(S, src1, src2);
    for(uint32_t i=0;i<8;i++)
    {
        S_MOD_R[7-i] = S[15-i];
    }
    BigMul(T_16, S_MOD_R, V);
    for(uint32_t i=0;i<8;i++)
    {
        T_8[7-i] = T_16[15-i];
    }
    BigMul(T_16, T_8, P);
    carry = BigAdd(M, S, T_16, 0, 16);
    for(uint32_t i=0;i<8;i++)
    {
        U[7-i] = M[7-i];
    }
    if(carry == 1)
    {
        BigSub(U, U, P, 8);
    }
    else
    {
        carry = BigSub(TEMP, U, P, 8);
        if(carry == 1)
        {
            for(uint32_t i=0;i<8;i++)
            {
                U[7-i] = TEMP[7-i];
            }
        }
    }
    for(uint32_t i=0;i<8;i++)
    {
        dest[7-i] = U[7-i];
    }
}

void BigMul(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    uint32_t accu[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t carry = 0;
    uint32_t k = 0;
    uint64_t temp_0 = 0;
    uint32_t temp_1, temp_2, temp_3;
    for(uint32_t i=0;i<8;i++)
    {
        for(uint32_t j=0;j<8;j++)
        {
            temp_0 = ((uint64_t) src1[7-i]) * ((uint64_t) src2[7-j]);
            temp_1 = (uint32_t) temp_0;
            temp_2 = (uint32_t) (temp_0 >> 32);
            temp_3 = accu[15-(i+j)];
            accu[15-(i+j)] = accu[15-(i+j)] + temp_1;
            if(((uint64_t) temp_3 + (uint64_t) temp_1) > UINT32_MAX)
            {
                carry = 1;
            }
            else
            {
                carry = 0;
            }
            temp_3 = accu[15-(i+j+1)];
            accu[15-(i+j+1)] = accu[15-(i+j+1)] + temp_2 + carry;
            if(((uint64_t) temp_3 + (uint64_t) temp_2 + (uint64_t) carry) > UINT32_MAX)
            {
                carry = 1;
                k = 0;
                do {
                    k = k+1;
                    temp_3 = accu[15-(i+j+1+k)];
                    accu[15-(i+j+1+k)] = accu[15-(i+j+1+k)] + carry;
                    if(((uint64_t) temp_3 + 1) > UINT32_MAX)
                    {
                        carry = 1;
                    }
                    else
                    {
                        carry = 0;
                    }
                }while(carry == 1);
            }
        }
    }
    for(uint32_t i=0;i<16;i++)
    {
        dest[15-i] = accu[15-i];
    }
}

uint32_t BigSub(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t size)
{
    uint32_t accu[size];
    uint32_t carry = 1;
    for(uint32_t i=0;i<size;i++)
    {
        accu[size-1-i] = ~src2[size-1-i];
    }
    carry = BigAdd(dest, src1, accu, carry, size);
    return carry;
}

uint32_t BigAdd(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t c, uint32_t size)
{
    uint32_t accu[size];
    uint32_t carry = c;
    for(uint32_t i=0;i<size;i++)
    {
        accu[size-1-i] = src1[size-1-i] + src2[size-1-i] + carry;
        if(((uint64_t) src1[size-1-i] + (uint64_t) src2[size-1-i] + (uint64_t) carry) > UINT32_MAX)
        {
            carry = 1;
        }
        else
        {
            carry = 0;
        }
    }
    for(uint32_t i=0;i<size;i++)
    {
        dest[size-1-i] = accu[size-1-i];
    }
    return carry;
}
