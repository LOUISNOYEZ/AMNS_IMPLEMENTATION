/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xparameters.h"
#include "AMNS_arith_ip.h"
#include "xtime_l.h"

void AMNS_mult(uint32_t* dest, uint32_t* src1, uint32_t* src2);
void display_coeff(uint32_t* src, uint32_t size);
uint32_t BigAdd(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t c, uint32_t size);
uint32_t BigSub(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t size);
void BigMul(uint32_t* dest, uint32_t* src1, uint32_t* src2);
void MgtMul(uint32_t* dest, uint32_t* src1, uint32_t* src2);

uint32_t V[8] = {0xC9BD1905, 0x15538399, 0x9C46C2C2, 0x95F2B761, 0xBCB223FE, 0xDC24A059, 0xD838091D, 0xD2253531};
uint32_t P[8] = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFC2F};

uint32_t A[100][8] = {{0x2c5d354b, 0x120954ec, 0x78cd2256, 0x7e51289b, 0x4e8c0ce6, 0x7fe70a0e, 0x7aa04a6b, 0x6f6d13e9},
		{0x6f22316d, 0x0c8a1991, 0x01717caa, 0x40710781, 0x1ed72bb8, 0x31ee1801, 0x1181008e, 0x239b4bc9},
		{0x21637a5a, 0x07150c11, 0x07002cac, 0x53271231, 0x27fa185d, 0x727c5e38, 0x21a561ed, 0x27050ed9},
		{0x55917744, 0x664248f3, 0x259e2099, 0x4d657d80, 0x57310c6d, 0x73b751d3, 0x074a4447, 0x4fa16b34},
		{0x6aab71e2, 0x3645080a, 0x5b895b43, 0x19d36186, 0x070f521f, 0x7fd9654b, 0x62e33204, 0x1b971e1c},
		{0x16d955d0, 0x17bd7e4e, 0x77466d56, 0x775e31b2, 0x46e9004a, 0x13061052, 0x3d9207c2, 0x5cef0c06},
		{0x3ffe1489, 0x45e17600, 0x132e77c5, 0x6d9c64c1, 0x0d9274d5, 0x58462e6e, 0x05220659, 0x326b31d9},
		{0x69034af7, 0x3983100b, 0x397139c8, 0x73e3237f, 0x5e075736, 0x02641be6, 0x716233e7, 0x1b0d5fa8},
		{0x2d245ef7, 0x7030471a, 0x1eb84fd7, 0x7dcc2e0a, 0x314d3f26, 0x400a0cc9, 0x23292e94, 0x64c97e39},
		{0x761678a3, 0x181a3890, 0x232700d9, 0x2c7d364f, 0x0091051b, 0x685820f7, 0x53c1559e, 0x0d847b80},
		{0x11e551d5, 0x037b3081, 0x42ee3523, 0x0daa138b, 0x3c0673bb, 0x0f6e1785, 0x2bc17e5c, 0x3ff87b64},
		{0x5c1a24bb, 0x340c1647, 0x5f716170, 0x3eb2318a, 0x069121e0, 0x1f6a2fed, 0x09b81dcf, 0x6bda58f8},
		{0x220971cb, 0x620a2b5c, 0x189a7d51, 0x747d2f69, 0x4b86593b, 0x32ba29ca, 0x61b24d59, 0x65416581},
		{0x2d183927, 0x41e12b96, 0x0d561e75, 0x7c0d4098, 0x3c0e696d, 0x36223d30, 0x2c4e6162, 0x219a5577},
		{0x65574780, 0x022574d4, 0x0c820209, 0x1d8e5fcf, 0x51953a4f, 0x2a3662bf, 0x5bc47734, 0x09ec3cb8},
		{0x6f1643cf, 0x2a1f5ee7, 0x3fdf1ed1, 0x6a1372e1, 0x61113baa, 0x6f092128, 0x488b193f, 0x4e493264},
		{0x37985f9d, 0x6e140e11, 0x5f6f20f2, 0x082546e3, 0x13fa659f, 0x0a29258d, 0x04be5b95, 0x77414533},
		{0x1c1f769b, 0x09507aa1, 0x7e136d6a, 0x424e3bce, 0x29a11c7f, 0x40a6183e, 0x5f77624e, 0x45711529},
		{0x48944ac9, 0x441e3c3a, 0x262a3bb4, 0x47894acd, 0x2c7f2dd2, 0x7add195b, 0x1b6a5e23, 0x0a870717},
		{0x22382773, 0x2ffb2d2c, 0x42fa3929, 0x724572c5, 0x3dc633d4, 0x558142d8, 0x661b7d78, 0x0e99072d},
		{0x1c131dad, 0x368d0877, 0x497837f8, 0x030415b6, 0x08ea6990, 0x38982952, 0x328e6687, 0x35084e8f},
		{0x636b503f, 0x22a908f0, 0x7d9c54f6, 0x1b80532f, 0x39884d91, 0x0c232560, 0x457e4fa3, 0x654a75d8},
		{0x09dd70f1, 0x0ba73ff2, 0x06247f66, 0x75dc15c6, 0x6b047383, 0x13a3049a, 0x30f36069, 0x7c0a2bc0},
		{0x35bf0ee7, 0x19e10455, 0x110237ba, 0x13887c75, 0x2cf0599e, 0x7713283c, 0x5aa861b8, 0x390b3292},
		{0x3db9613c, 0x1db573d0, 0x6cf47fa5, 0x6f5a7d24, 0x68952a51, 0x70461e5a, 0x51613b6f, 0x78d672d5},
		{0x633d2553, 0x022b79c3, 0x54337c5b, 0x63e471fd, 0x1c056be3, 0x5cd917d6, 0x76a260a0, 0x2d6472c3},
		{0x37710f36, 0x5afe793c, 0x62b22a5e, 0x52c641f9, 0x6b6570a2, 0x46c82dbb, 0x22a06b44, 0x58b43bf4},
		{0x29eb796b, 0x7c0f27a2, 0x123761c3, 0x4a1c1b31, 0x7ed03c48, 0x37fe2494, 0x5e731d41, 0x19dd4fd3},
		{0x4acb1f88, 0x45cc695c, 0x20247538, 0x17681e6c, 0x313b2d1f, 0x23732de4, 0x0777678e, 0x5ceb6346},
		{0x3bd31518, 0x5c16305a, 0x0a174ad8, 0x37b94378, 0x415726b6, 0x370962e0, 0x4b230c85, 0x09ff472b},
		{0x1f903ada, 0x74652158, 0x321359dc, 0x488710a6, 0x4be14a6f, 0x268d5dfd, 0x36af2bf6, 0x5ac508f2},
		{0x3efd2640, 0x2ac71a53, 0x6eda3e84, 0x52421a39, 0x43a42b13, 0x3c824b21, 0x69bb4753, 0x3d513a31},
		{0x31880dd3, 0x11124259, 0x794655f1, 0x056d5ace, 0x211d373b, 0x045f4130, 0x3b103823, 0x3b881120},
		{0x4d6f7ecc, 0x24ab4ff5, 0x678867ae, 0x733f32de, 0x59bf6d49, 0x5ef239be, 0x5b420a92, 0x275c6e4e},
		{0x507a491c, 0x5a1b3187, 0x2a876b20, 0x0160030d, 0x6ab8662b, 0x05311ea3, 0x73620fbe, 0x7c7d23fa},
		{0x753314a5, 0x3a481fa9, 0x0f2a153e, 0x283804ce, 0x4bae353e, 0x68e06f21, 0x34c0372c, 0x6fa60cea},
		{0x202f215d, 0x21c81809, 0x4e9c1f11, 0x03a9538b, 0x367a4de6, 0x054b017e, 0x126d3a6e, 0x2eec2da5},
		{0x385101b1, 0x10293bd5, 0x74c63a1b, 0x32b66b71, 0x557b6edc, 0x58d40fb1, 0x7f3e5208, 0x71b9236e},
		{0x18704f3d, 0x4e616308, 0x424e7b6b, 0x67905a6f, 0x662a6915, 0x74f438ea, 0x1ef943dc, 0x781d5e4c},
		{0x0ccf03da, 0x7ed33ae3, 0x1b676d2f, 0x0840262f, 0x272e2a09, 0x615623d6, 0x37c2040e, 0x3d1d2340},
		{0x05030f64, 0x5a2d43ab, 0x36650dd6, 0x1c5c69e2, 0x2f92365f, 0x5875580f, 0x73cd3baf, 0x11572a15},
		{0x5cb77d07, 0x12d01739, 0x7a126961, 0x525f5870, 0x64cd1aaf, 0x68ef17f8, 0x4f571a26, 0x155861ca},
		{0x05b0227b, 0x53752f1b, 0x2fa967fc, 0x2557180b, 0x1c78386d, 0x48163614, 0x3fb23590, 0x47e44928},
		{0x06117320, 0x0ca62f41, 0x7bd10d99, 0x6e9a099c, 0x266218b5, 0x0a263c7f, 0x2b020538, 0x71f41873},
		{0x0e414d2a, 0x5c815e7f, 0x06e21f82, 0x19c73f13, 0x0aa575e6, 0x701f6e21, 0x05704927, 0x7d0a37ae},
		{0x5ae3100c, 0x60e04561, 0x7fab5cbf, 0x6e79251b, 0x77f42003, 0x138445d4, 0x23cd5a2c, 0x7e7964a2},
		{0x667c5818, 0x2b994f00, 0x68d74e13, 0x24f57d21, 0x2be17973, 0x10d85f60, 0x1bcf121b, 0x261235cf},
		{0x213721b5, 0x38030003, 0x58a97dbc, 0x17847a55, 0x598c5081, 0x07904c5d, 0x06bf51ea, 0x1a6d47c1},
		{0x2a2b0fee, 0x0b0541c6, 0x56511155, 0x0629345e, 0x05f351bc, 0x7e892cf7, 0x2d973015, 0x4c4447b2},
		{0x13141a02, 0x6e99698e, 0x4dd13b76, 0x63443cb3, 0x3f316e17, 0x1cd24c83, 0x14e0495b, 0x595a2737},
		{0x49144553, 0x590c3bf8, 0x24180af0, 0x10ab0af1, 0x72a51168, 0x21793e0e, 0x398f46bc, 0x0ce73580},
		{0x5e830edb, 0x152a706a, 0x1a2d04d6, 0x7f40039b, 0x10eb60ad, 0x3dd226ae, 0x03394165, 0x02c74c6c},
		{0x07004cf0, 0x07f806be, 0x7af4608d, 0x2bc26b03, 0x1fbd4f20, 0x75f13dce, 0x12807db9, 0x19450b60},
		{0x258a3a28, 0x703c66fe, 0x6cc56cc4, 0x4d004a76, 0x2ac2342b, 0x09191f47, 0x7ad15ef1, 0x123d64c8},
		{0x7bb67f6d, 0x1e0f2f41, 0x57ad3bd4, 0x52b702bc, 0x0f04258b, 0x0c391b5e, 0x5f3200b3, 0x36a4197b},
		{0x7e3479d1, 0x785903b4, 0x689f2a29, 0x620d70ad, 0x5cbf1879, 0x512e5eb4, 0x18b16ae8, 0x374301b3},
		{0x13003971, 0x359a06a9, 0x0b0a4a6c, 0x14d24443, 0x16423352, 0x089909e7, 0x1a6d7f53, 0x3e4d73f9},
		{0x72864fbf, 0x5a0860f3, 0x24c517eb, 0x07ee39a6, 0x6ae9617f, 0x1c99715f, 0x6ddf5230, 0x55611895},
		{0x0ca45ba4, 0x7ce0221e, 0x39d43dfe, 0x155b65c1, 0x5f3f1b1c, 0x23590091, 0x12f92d41, 0x1d887301},
		{0x008a61d8, 0x75d27d24, 0x2c3f34f4, 0x3c2b4ccb, 0x0d490726, 0x25e347ae, 0x7f6525b3, 0x041f02d6},
		{0x7c6b4aaf, 0x362b5ac7, 0x5cd34c31, 0x0b9a615d, 0x67c20392, 0x28c03a83, 0x6b9d4224, 0x559c32bb},
		{0x1a477a05, 0x603d3aad, 0x7e13242a, 0x304d3583, 0x6fe52554, 0x5b93360b, 0x464b1a57, 0x0f067dde},
		{0x4a1d6f3a, 0x37c14dcc, 0x40cf2eae, 0x42d77540, 0x0195175c, 0x791736e6, 0x1b2279a4, 0x7bd31350},
		{0x25c5062f, 0x61d35ff7, 0x0d4b2c77, 0x49db6335, 0x32c77bf2, 0x603174dd, 0x2f970906, 0x759d2b15},
		{0x318235ec, 0x6beb5c56, 0x0690231c, 0x1a592391, 0x527e0521, 0x08a638e1, 0x6c51136a, 0x397338e8},
		{0x7d0d183c, 0x771c176a, 0x40ef38c2, 0x225d294b, 0x69f76ee9, 0x0a45208c, 0x1c536ea7, 0x6b6c0fe4},
		{0x42610f6e, 0x50f12b8d, 0x22dd6b24, 0x05693279, 0x54467f89, 0x5fb5479d, 0x7df0531e, 0x4bc50baa},
		{0x6e266616, 0x509f6f6e, 0x740557f3, 0x075c3f2c, 0x1d7b061f, 0x64583980, 0x61866c22, 0x57fc15b1},
		{0x60847067, 0x791b2498, 0x5e804c6e, 0x0b4f2c20, 0x54b53d3e, 0x1a8c2e42, 0x42c70068, 0x041137bf},
		{0x3b1849a3, 0x52e45a6c, 0x75973cf1, 0x7a5f4040, 0x495d6d7e, 0x2cf12420, 0x4839465f, 0x56d409e5},
		{0x43b15180, 0x0ab1749f, 0x563f10a1, 0x47535ead, 0x759278e5, 0x69737bf7, 0x01a066ee, 0x479f2d4f},
		{0x19ec40cd, 0x16732eca, 0x08ac3ea6, 0x30ee2bef, 0x5da574ed, 0x569928d6, 0x0d736645, 0x377d1de9},
		{0x77b12f61, 0x3ffa0ccc, 0x7ae30565, 0x68bd5c49, 0x2ca77129, 0x10b103e4, 0x5541565b, 0x0fb62081},
		{0x34a96d7a, 0x67d526f2, 0x644d57f9, 0x149165a1, 0x3e591053, 0x07d7740a, 0x623c58be, 0x7d7d6724},
		{0x5c4c0ab1, 0x673f2245, 0x11347c64, 0x32d47b1b, 0x43ba68af, 0x688f5d32, 0x2c732255, 0x699f097d},
		{0x29571594, 0x4791614a, 0x338127d2, 0x42d134be, 0x4383579a, 0x1b331622, 0x6b9c4eb2, 0x605e5efd},
		{0x25496819, 0x62c82e32, 0x31f94b43, 0x7ce1554c, 0x58942622, 0x5d556309, 0x49fe2284, 0x76a3246c},
		{0x09ff2302, 0x6a2f603c, 0x15507119, 0x0d3544ae, 0x392a06a9, 0x1f350387, 0x429c1d07, 0x4ba762de},
		{0x5a725040, 0x28dd6dbc, 0x49fc4bad, 0x322c4903, 0x5cfd7428, 0x6f4b3490, 0x44aa3292, 0x6c087176},
		{0x5ca723ac, 0x38370a2f, 0x1cc21ab6, 0x794624d9, 0x5f577d68, 0x566614a1, 0x74433ca6, 0x5ee1342e},
		{0x578d4fcf, 0x43c6620b, 0x1a035b48, 0x51fd7869, 0x16bc2169, 0x32b834f0, 0x073f3224, 0x131634c2},
		{0x1b5a497a, 0x4e32298b, 0x50e02f92, 0x408a48a8, 0x6a113fbf, 0x374d05d8, 0x019a4a77, 0x6d937854},
		{0x4c63776d, 0x51ca5046, 0x36d75bbc, 0x6f9c49a6, 0x1f9b008f, 0x4fe60b50, 0x508404e5, 0x49177679},
		{0x341d6a54, 0x7ca86cb7, 0x2cb15e93, 0x508b0781, 0x01607596, 0x6c737795, 0x5fa70762, 0x7f4538ba},
		{0x3cbc5bc3, 0x05334195, 0x094032b2, 0x325066e1, 0x6560683f, 0x031b22d9, 0x3342127a, 0x7f5102c2},
		{0x08fa0022, 0x481f661d, 0x1f3d7aa2, 0x4ad11ccd, 0x414c6ad5, 0x545e6e3e, 0x77745850, 0x4f8062c7},
		{0x00601578, 0x24470321, 0x4e0549d2, 0x55633e42, 0x29d43323, 0x1ca02ab3, 0x1641468e, 0x3b0d69c6},
		{0x6ff828cc, 0x69210c24, 0x0b8d7aa8, 0x04e227f5, 0x39de0f64, 0x0198523d, 0x26094627, 0x4dca47e3},
		{0x43164135, 0x094f2612, 0x15f00ec3, 0x281b01f2, 0x02bf3fe3, 0x00bd1605, 0x344910c7, 0x15937fac},
		{0x331f263a, 0x4c353934, 0x48a8798b, 0x08482c5f, 0x6f1d772b, 0x3aa96ff8, 0x3c6c7dd1, 0x1dae1d76},
		{0x04a77fa2, 0x22927f90, 0x45c7732e, 0x0dc12819, 0x59e97127, 0x27b91bf7, 0x1c2264cd, 0x3c2b5c9d},
		{0x10785e55, 0x11e42bb5, 0x21963635, 0x128b1175, 0x59125a13, 0x7a1777d9, 0x7fa75034, 0x16b17ce8},
		{0x18dc7566, 0x725a28c2, 0x16536cba, 0x7d9c6ade, 0x6d192d96, 0x1dde37b3, 0x30933a49, 0x701d5cc1},
		{0x3a0a5b03, 0x0eb4060f, 0x5560138c, 0x1531229e, 0x63c31402, 0x6e6c7e46, 0x28c2323a, 0x445d63a2},
		{0x277b4b2a, 0x0eed7ed0, 0x145c7510, 0x02f6486a, 0x4e195fd8, 0x0372285e, 0x28660ce3, 0x06b0203f},
		{0x55de4a2d, 0x4b2f4eab, 0x170d187a, 0x35c40f41, 0x6f3a24e1, 0x7a2f7ba9, 0x64c33cca, 0x6639330a},
		{0x2c4c2d95, 0x229422e3, 0x20aa09d7, 0x3d1502e5, 0x62af7696, 0x0cbe7123, 0x0e615c42, 0x692e0b40},
		{0x7dfa7dbc, 0x03dd6fef, 0x0da56fe6, 0x4dcc6ac8, 0x4f7f3099, 0x33e94c69, 0x54b42ccb, 0x6fcd3089},
		{0x77194d50, 0x6b977a23, 0x70042cb8, 0x5f422076, 0x64a46478, 0x020a5928, 0x414d2c0f, 0x14dd45eb},
		{0x40686b96, 0x29453844, 0x543168b7, 0x6acf2c9a, 0x4c987f10, 0x662130ee, 0x0d9c6327, 0x08a20588}};

uint32_t B[100][8] = {{0x63444b79, 0x2efc7474, 0x12ee04b8, 0x1db25d06, 0x213c011c, 0x421679e4, 0x0bed27ec, 0x2f4f1a16};
{0x4a8c596a, 0x2b722273, 0x5aa03844, 0x501d23d1, 0x540652db, 0x27e82bc3, 0x5f6d13a1, 0x2c3b1a91};
{0x4cb33c91, 0x70ba7407, 0x25b47918, 0x3e660808, 0x3e0b38b4, 0x019812cb, 0x0e44323a, 0x29480fe8};
{0x2119424d, 0x30531301, 0x6960725a, 0x39c370e0, 0x352f0187, 0x28ee4f80, 0x7e842655, 0x318f2035};
{0x1ce342a4, 0x4ea24c5c, 0x0ade478f, 0x29860904, 0x701f09bd, 0x55082d27, 0x08033793, 0x63f108e9};
{0x5cf10e8d, 0x233150d8, 0x761f0db7, 0x01b70244, 0x3e485ba3, 0x6dd64edb, 0x08bc62e4, 0x5d952102};
{0x2ddd6f9b, 0x453c27d9, 0x29735b04, 0x789a3364, 0x4b80581d, 0x12ef655f, 0x5a3134de, 0x12d20a82};
{0x685d1f51, 0x24d419a0, 0x60230c82, 0x4dc206a3, 0x63992459, 0x4166697b, 0x275e6d76, 0x40170d9d};
{0x4da8795f, 0x051114e7, 0x5c7c425e, 0x792b3e8f, 0x58372bbe, 0x45d43bdd, 0x59d64b03, 0x1d747e19};
{0x41a519c1, 0x2a042f02, 0x1ab634e4, 0x17ac30a6, 0x2d6a62cf, 0x42676309, 0x17b22e32, 0x3cdb5ab1};
{0x3e4c39d7, 0x72a805ef, 0x73003087, 0x2cc045ed, 0x124a3086, 0x2c3f1508, 0x4ffb3ee9, 0x1f5e3118};
{0x7b116706, 0x7b8856a5, 0x2d1e1105, 0x2d3d36f4, 0x3803622d, 0x63a0032c, 0x2b005141, 0x0bab00e4};
{0x35d22eea, 0x26895157, 0x30077c66, 0x48e148e6, 0x69c4365f, 0x38b83948, 0x79a6797a, 0x681854e5};
{0x3ae93448, 0x36295a33, 0x32a36f0c, 0x303d5436, 0x33ab319c, 0x6bdb158d, 0x469046cb, 0x384d7cde};
{0x5e417a82, 0x6d3d3188, 0x4a9a20e3, 0x37162ae2, 0x42aa3130, 0x11c85505, 0x07e2079d, 0x7b2b7eea};
{0x3b7472ae, 0x4aaf0751, 0x5a8f6122, 0x16734713, 0x64ac2444, 0x75de69d4, 0x63a942f7, 0x22894f48};
{0x55a16286, 0x474b44eb, 0x6dbf3ce6, 0x14e83349, 0x750638e1, 0x11f678a7, 0x1fb41a3a, 0x101e288d};
{0x4afb5761, 0x7de22fa9, 0x68283d6e, 0x29a85234, 0x234c514c, 0x707253a8, 0x0f953ded, 0x7e297cca};
{0x2dfb50dd, 0x693b0de7, 0x38801357, 0x33de0d83, 0x4cdf0959, 0x47cb1896, 0x5a26063a, 0x12792f38};
{0x4bc65b89, 0x688928e3, 0x32b81e19, 0x07a43c40, 0x5bd413dc, 0x1e5f2ab1, 0x6b9a73d6, 0x52f30e0b};
{0x6d565371, 0x3b9672e3, 0x3de50b1e, 0x198148f8, 0x0a3e0282, 0x75ce0d3b, 0x443f4483, 0x21c55452};
{0x341d3c4c, 0x776e4ca7, 0x2585614a, 0x222f4fe0, 0x0e8c0b1e, 0x166d4a98, 0x2d0164da, 0x7cb10fb4};
{0x0dba1c29, 0x5ae33e49, 0x04f52f24, 0x7f575911, 0x612a2843, 0x128712fc, 0x5f0771fe, 0x11893d43};
{0x0e487ad5, 0x6b57789b, 0x3fd8292a, 0x3f115bbc, 0x4fbb1a38, 0x43641305, 0x1d125520, 0x2b29126c};
{0x7d2f00ed, 0x17aa1e80, 0x08b82e4f, 0x52ea1534, 0x79ab2284, 0x487e4a42, 0x1f874f93, 0x694d7372};
{0x788e5c4a, 0x590d0e6a, 0x14f85be1, 0x7811327b, 0x47aa6852, 0x640b679f, 0x19144cd1, 0x62242adc};
{0x1dbe7ba5, 0x767425f0, 0x38365b88, 0x35c238ca, 0x6fc93d2d, 0x763c3776, 0x6ec6422b, 0x649a6449};
{0x253969d4, 0x295873ba, 0x4c2f2396, 0x3af92ac5, 0x32a26095, 0x0b2b300f, 0x12511814, 0x796971ac};
{0x456e2a39, 0x2fc74b01, 0x76782db8, 0x7d65633c, 0x538d6827, 0x2e4842fe, 0x29cc52ac, 0x72f6612f};
{0x5a8f709a, 0x18ff1234, 0x20c36e71, 0x498f1f44, 0x60e93228, 0x1f8c57fc, 0x0e0f4712, 0x1cc20383};
{0x3e484e92, 0x302e681b, 0x1a853fc5, 0x335d17f0, 0x28fe3758, 0x372a3944, 0x21a22e00, 0x37ec1f8c};
{0x72d901c5, 0x38cc577f, 0x61fd6e9b, 0x399c6e9d, 0x36c75034, 0x5bf64f0f, 0x25972df2, 0x4bf50109};
{0x46524e96, 0x182e3ba6, 0x6f655099, 0x15323e50, 0x682562a9, 0x0b6b4aae, 0x1b4f250d, 0x0b0138c9};
{0x5c5e727c, 0x6d853543, 0x73251a3c, 0x74e77b7b, 0x2c8671e1, 0x4f3108f0, 0x063164dd, 0x5acb0ee7};
{0x0f96342e, 0x3c51680a, 0x3421431a, 0x146a21c3, 0x7d084602, 0x59920ba6, 0x4fdb2cbd, 0x77bf2a4c};
{0x19685be8, 0x6ff3212a, 0x4b832b7b, 0x393a2c84, 0x4e6d1256, 0x5c047d46, 0x712447fb, 0x710c55c5};
{0x401c2d43, 0x251e73af, 0x1bc01e32, 0x568f71b0, 0x47b1614c, 0x04277493, 0x6c4f5df6, 0x3dad557e};
{0x403d1b30, 0x4cde14da, 0x765e2081, 0x185b6c60, 0x3cc370bc, 0x393927ba, 0x3bba7773, 0x0a80024a};
{0x71ea0bbb, 0x0f1d48fe, 0x4d4a0cc8, 0x35284181, 0x1c28586d, 0x21b261dd, 0x11b275a2, 0x50537fc7};
{0x7b26517e, 0x650e0dfb, 0x13003b76, 0x781329b8, 0x2bd1103a, 0x719607f3, 0x4f39576e, 0x76ee451f};
{0x330a4580, 0x6ad7365d, 0x63c85dc3, 0x3dbe089d, 0x4273734f, 0x7cbc13eb, 0x550c54a8, 0x573a5290};
{0x086b63f7, 0x6d4a0e36, 0x54af0281, 0x122a5734, 0x63df37f9, 0x63e4219a, 0x28ea1013, 0x5a2052ec};
{0x05847478, 0x5cd36e35, 0x6e41040d, 0x31d8226c, 0x769c1dd8, 0x13cc2f27, 0x3f667ff0, 0x2de95b3f};
{0x3a547bc5, 0x6e5b1b33, 0x02b43fca, 0x74686b7b, 0x41347321, 0x42ea7c56, 0x5a150d8b, 0x2bdc6458};
{0x5f5e568d, 0x3d9906ef, 0x6fbd168d, 0x06fe4e56, 0x68ab67f2, 0x196b3bf8, 0x4dc72062, 0x63e80b3e};
{0x77290610, 0x450a3e99, 0x7857017a, 0x00956136, 0x341a10d9, 0x157223d0, 0x08027ffd, 0x37eb360b};
{0x2aa24da6, 0x19b27af1, 0x5f44502b, 0x66b92fc3, 0x3ca60584, 0x742026c6, 0x713702e6, 0x3cc037f3};
{0x393133ff, 0x221d0610, 0x24df19b9, 0x6c78370c, 0x40d72449, 0x364227af, 0x6bf85b92, 0x1e1508ae};
{0x45585faa, 0x31a528a5, 0x27df0fcf, 0x2e8f4e1b, 0x0a974e76, 0x3e733ffa, 0x0ebe1864, 0x2ff81ac8};
{0x0eb57abb, 0x0a5c0342, 0x0b961eae, 0x41da6fa6, 0x7fb4049a, 0x54241b9c, 0x53415872, 0x522120e9};
{0x01863683, 0x79fa5272, 0x28955861, 0x700a14c6, 0x5e853eb0, 0x46ec3bfa, 0x7f6575c4, 0x69185123};
{0x19fd136c, 0x56914bd4, 0x43c26a82, 0x5e8311ab, 0x1cf94cf4, 0x71dd173f, 0x1f2372c4, 0x1bd94763};
{0x25362018, 0x1b3a1ebf, 0x346f50c9, 0x70b2532c, 0x38797619, 0x1014332f, 0x103353ee, 0x47a95c6e};
{0x11517b38, 0x33827971, 0x78ac1b5c, 0x743b27c4, 0x58ee5c7e, 0x6638363f, 0x44e76ab1, 0x170348c5};
{0x6a6f0e51, 0x71ec17f6, 0x127343ef, 0x2a0e3cb6, 0x0c7a389b, 0x50722201, 0x02310fca, 0x5f322210};
{0x3ef9734a, 0x21f829bf, 0x699c1365, 0x08ca4099, 0x07db5661, 0x5bfc1845, 0x4dd44460, 0x336875b6};
{0x7f3a1716, 0x0e982c7e, 0x7dab20bc, 0x49a668ca, 0x42906e1d, 0x728f68d9, 0x0a652a41, 0x773b6b71};
{0x013c00c8, 0x76bb7e66, 0x69d978c5, 0x75f76ed1, 0x120721c4, 0x51f060f8, 0x573447f9, 0x34d022df};
{0x059e744f, 0x35c72ebf, 0x251f7a16, 0x310252d2, 0x36c32288, 0x14f14c1d, 0x51d94839, 0x0b4c65f9};
{0x4a646cdb, 0x5a931d0f, 0x60ad35a3, 0x698b4915, 0x73bb69d0, 0x1ade3801, 0x124d01a6, 0x330328e7};
{0x13a303e4, 0x5fff5521, 0x2bd606e7, 0x75ab5a34, 0x391c05c2, 0x0a227437, 0x7595329b, 0x4aee2310};
{0x20b744aa, 0x4a482f62, 0x495e7827, 0x654f6a0c, 0x3d3f1dad, 0x5d8c4907, 0x4469418d, 0x19c86478};
{0x335147bd, 0x39cb3a0c, 0x28d82215, 0x6128425a, 0x0da26bb4, 0x58aa6d8d, 0x069f5650, 0x19a8181e};
{0x1e7e595e, 0x16a16306, 0x3335327b, 0x3f08705f, 0x12db7082, 0x14c243b3, 0x46ce1bd6, 0x28e83637};
{0x62b165c3, 0x23b05be8, 0x272d4a89, 0x710132aa, 0x6c5e4c46, 0x3b0f2889, 0x0a01443f, 0x0f031e8b};
{0x7200401e, 0x646869a4, 0x417a1ac4, 0x20817eb5, 0x2cd75977, 0x0f4a5bad, 0x06c468aa, 0x742c02ce};
{0x13ca27dc, 0x32381d1d, 0x25de232c, 0x56bf368e, 0x01564361, 0x1fdb7991, 0x78c3314f, 0x768673bf};
{0x5d875213, 0x2c6378e3, 0x2b752b2d, 0x07813bb7, 0x577a13b6, 0x6feb489c, 0x05954431, 0x635932e5};
{0x2ca47bf1, 0x2dea4413, 0x17f172e5, 0x77e93d6d, 0x6c9410eb, 0x2995190f, 0x3feb766a, 0x4fb93923};
{0x37592c64, 0x3b5b4a6c, 0x3c6e21db, 0x45cf520d, 0x730d1e64, 0x2d6c4628, 0x58870e92, 0x323a3323};
{0x074873eb, 0x134e7b32, 0x6471249b, 0x6e071aae, 0x422018ce, 0x2ec6236a, 0x40831077, 0x4e24741d};
{0x69bf303a, 0x32171be6, 0x53ac00f9, 0x0134705e, 0x73d83cac, 0x129613fa, 0x28e46bf6, 0x70967431};
{0x71bd45b0, 0x12ed50e3, 0x66634738, 0x06a105bb, 0x0a0062f0, 0x39f5190a, 0x4f92205d, 0x59500e16};
{0x730102bd, 0x05612efa, 0x64780ead, 0x33784952, 0x622375b4, 0x3e3175ba, 0x33f24484, 0x02346ab6};
{0x2e0b4b2a, 0x114e378c, 0x6cd10da3, 0x434019fb, 0x403e1b3b, 0x09aa5e57, 0x36216b06, 0x0cc45477};
{0x65670d14, 0x7dff4950, 0x761a551f, 0x2a631392, 0x5a3614a4, 0x23053310, 0x4afa4465, 0x1edd0f5b};
{0x723b023f, 0x26fa0597, 0x3ac24ec4, 0x596b56d6, 0x54e21195, 0x106e3bb9, 0x31375959, 0x380878a6};
{0x67397c68, 0x38ba348f, 0x23da2279, 0x07bc09c6, 0x0c5828a5, 0x07d917a2, 0x53435bc0, 0x52595ec8};
{0x68540cd9, 0x2077756a, 0x073f0583, 0x32ab1fb4, 0x2bf239e8, 0x74c75d98, 0x71dc783e, 0x5ea5100d};
{0x32be41e0, 0x265a3e5f, 0x1cff08e0, 0x414d6a96, 0x3cd304df, 0x0776731b, 0x46173ebe, 0x7c7059a4};
{0x2e5e30df, 0x7e4f256f, 0x7d4f50c8, 0x6c873bfd, 0x1d782c1b, 0x1140545c, 0x1d18789d, 0x38221412};
{0x163f12a5, 0x0ba7386a, 0x24d35e7e, 0x20dc78a8, 0x43ed4079, 0x10a51921, 0x30bc6587, 0x50ea0498};
{0x56625839, 0x7509180c, 0x3bfa737b, 0x58875719, 0x757b2416, 0x745e146d, 0x4bf42f5e, 0x3007621f};
{0x740467de, 0x01697855, 0x129c3d7b, 0x44327aa7, 0x0def369b, 0x662c615c, 0x347b0c42, 0x578e684b};
{0x666610cf, 0x6d2e33ab, 0x56485484, 0x7c330071, 0x740401c1, 0x60ab7633, 0x0b77156a, 0x65dd3b9b};
{0x42557eb4, 0x746757cb, 0x51a303ff, 0x1d173b39, 0x1b21066f, 0x1ed32776, 0x069c3317, 0x6c251166};
{0x58750c89, 0x034542b3, 0x53427ecb, 0x11142b6b, 0x4d1a4904, 0x4cae3617, 0x5caa47a7, 0x2d2a45ee};
{0x0b7a584f, 0x256a3472, 0x61305431, 0x71530906, 0x7fca131a, 0x25644b14, 0x70671e2f, 0x3e771090};
{0x1a94214f, 0x07d6738c, 0x2def2139, 0x04b12f70, 0x28c521c7, 0x62ef747f, 0x349306fe, 0x0d790a7f};
{0x6dba39d6, 0x293a6ff2, 0x548b1439, 0x5aad36b7, 0x643303c7, 0x38a52fe1, 0x4f2455b2, 0x524c7a72};
{0x0ecd4909, 0x7f6a589d, 0x55580eb4, 0x789247e9, 0x230d57f2, 0x01f735d4, 0x7c3c3857, 0x424f76b8};
{0x1b5f2c72, 0x689f6ff4, 0x52fb6e40, 0x46ee1af4, 0x04a5439c, 0x6b603d82, 0x141a25c8, 0x7f6c67b3};
{0x0b27219f, 0x22886850, 0x2c833e25, 0x4240143c, 0x4bfb5b6d, 0x3c4d627f, 0x10ad649b, 0x3b365c00};
{0x5aaf7d4a, 0x20611e20, 0x17c9506e, 0x77de1064, 0x316601c1, 0x245b5fa2, 0x44921e97, 0x719f74fc};
{0x59ab6cf9, 0x5db87d0c, 0x0a7a4a75, 0x6b4217d3, 0x27964020, 0x587946e6, 0x42ed38b0, 0x1bb56fbf};
{0x05f33d87, 0x6147681d, 0x723e6cea, 0x034575b0, 0x4ebe315f, 0x1e5f05e7, 0x79d4144a, 0x28ac42f5};
{0x385f10ff, 0x5182553a, 0x3a45728a, 0x31203a14, 0x2de73df3, 0x51041373, 0x58030580, 0x3b554b5e};
{0x0b724250, 0x101a3f94, 0x45a039dd, 0x52eb2d80, 0x54f7099e, 0x683323f9, 0x61281f07, 0x785c7645};
{0x594d179a, 0x526f1340, 0x7aea194e, 0x05634669, 0x4af430cf, 0x54755c8d, 0x08fa3ff2, 0x259c6c43};
{0x6d7624ce, 0x65a21a2c, 0x0937716e, 0x24981e7a, 0x505805a5, 0x64a13181, 0x3bd61af6, 0x08773795}};

int main()
{
    XTime tStart, tEnd;
    double  ElapsedTime;

    init_platform();

    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x0U);

    uint32_t R[16];
    uint32_t busy = 0;

    XTime_GetTime(&tStart);
    for(int i=0;i<6;i++)
    {
        AMNS_mult(R,A[i],B[i]);
        display_coeff(R,4);
    }
    display_coeff(R,4);
    XTime_GetTime(&tEnd);
    printf("Output took %llu clock cycles.\n", 2*(tEnd - tStart));
	ElapsedTime = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND);
	printf(" Output took %.2f s.\n",ElapsedTime);
    cleanup_platform();
    return 0;
}

void AMNS_mult(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x0U);

	for(int i=0;i<4;i++)
    {
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i)*4, src1[2*i]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+1)*4, src1[2*i+1]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+8)*4, src2[2*i]);
    	AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, (2*i+1+8)*4, src2[2*i+1]);
    }

    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x3U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x7U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0x5U);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0xfU);
    AMNS_ARITH_IP_mWriteReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, 32*4, 0xdU);

	for(int i=0;i<16;i++)
    {
    	dest[i] = AMNS_ARITH_IP_mReadReg(XPAR_AMNS_ARITH_IP_0_S00_AXI_BASEADDR, i*4+16*4);
    }
}

void display_coeff(uint32_t* src, uint32_t size)
{
    for(int i=0;i<size;i++)
    {
    	xil_printf("R[%d] : 0x%08x%08x%08x%08x\n",i,src[i*4], src[i*4+1], src[i*4+2], src[i*4+3]);
    }
}

void MgtMul(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    uint32_t S[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t S_MOD_R[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t T_16[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t T_8[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t M[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t U[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t TEMP[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t carry = 0;

    BigMul(S, src1, src2);
    for(uint32_t i=0;i<8;i++)
    {
        S_MOD_R[7-i] = S[15-i];
    }
    BigMul(T_16, S_MOD_R, V);
    for(uint32_t i=0;i<8;i++)
    {
        T_8[7-i] = T_16[15-i];
    }
    BigMul(T_16, T_8, P);
    carry = BigAdd(M, S, T_16, 0, 16);
    for(uint32_t i=0;i<8;i++)
    {
        U[7-i] = M[7-i];
    }
    if(carry == 1)
    {
        BigSub(U, U, P, 8);
    }
    else
    {
        carry = BigSub(TEMP, U, P, 8);
        if(carry == 1)
        {
            for(uint32_t i=0;i<8;i++)
            {
                U[7-i] = TEMP[7-i];
            }
        }
    }
    for(uint32_t i=0;i<8;i++)
    {
        dest[7-i] = U[7-i];
    }
}

void BigMul(uint32_t* dest, uint32_t* src1, uint32_t* src2)
{
    uint32_t accu[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint32_t carry = 0;
    uint32_t k = 0;
    uint64_t temp_0 = 0;
    uint32_t temp_1, temp_2, temp_3;
    for(uint32_t i=0;i<8;i++)
    {
        for(uint32_t j=0;j<8;j++)
        {
            temp_0 = ((uint64_t) src1[7-i]) * ((uint64_t) src2[7-j]);
            temp_1 = (uint32_t) temp_0;
            temp_2 = (uint32_t) (temp_0 >> 32);
            temp_3 = accu[15-(i+j)];
            accu[15-(i+j)] = accu[15-(i+j)] + temp_1;
            if(((uint64_t) temp_3 + (uint64_t) temp_1) > UINT32_MAX)
            {
                carry = 1;
            }
            else
            {
                carry = 0;
            }
            temp_3 = accu[15-(i+j+1)];
            accu[15-(i+j+1)] = accu[15-(i+j+1)] + temp_2 + carry;
            if(((uint64_t) temp_3 + (uint64_t) temp_2 + (uint64_t) carry) > UINT32_MAX)
            {
                carry = 1;
                k = 0;
                do {
                    k = k+1;
                    temp_3 = accu[15-(i+j+1+k)];
                    accu[15-(i+j+1+k)] = accu[15-(i+j+1+k)] + carry;
                    if(((uint64_t) temp_3 + 1) > UINT32_MAX)
                    {
                        carry = 1;
                    }
                    else
                    {
                        carry = 0;
                    }
                }while(carry == 1);
            }
        }
    }
    for(uint32_t i=0;i<16;i++)
    {
        dest[15-i] = accu[15-i];
    }
}

uint32_t BigSub(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t size)
{
    uint32_t accu[size];
    uint32_t carry = 1;
    for(uint32_t i=0;i<size;i++)
    {
        accu[size-1-i] = ~src2[size-1-i];
    }
    carry = BigAdd(dest, src1, accu, carry, size);
    return carry;
}

uint32_t BigAdd(uint32_t* dest, uint32_t* src1, uint32_t* src2, uint32_t c, uint32_t size)
{
    uint32_t accu[size];
    uint32_t carry = c;
    for(uint32_t i=0;i<size;i++)
    {
        accu[size-1-i] = src1[size-1-i] + src2[size-1-i] + carry;
        if(((uint64_t) src1[size-1-i] + (uint64_t) src2[size-1-i] + (uint64_t) carry) > UINT32_MAX)
        {
            carry = 1;
        }
        else
        {
            carry = 0;
        }
    }
    for(uint32_t i=0;i<size;i++)
    {
        dest[size-1-i] = accu[size-1-i];
    }
    return carry;
}
